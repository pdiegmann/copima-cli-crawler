name: Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linting
        id: lint
        run: |
          echo "::group::ESLint Results"
          if bun run lint; then
            echo "✅ Linting passed"
            echo "LINT_STATUS=passed" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Linting issues found - continuing with analysis"
            echo "LINT_STATUS=failed" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"
        continue-on-error: true

      - name: Run tests with coverage
        id: tests
        run: |
          echo "::group::Test Results"
          if bun run test:coverage; then
            echo "✅ Tests passed"
            echo "TEST_STATUS=passed" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Some tests failed - continuing with coverage analysis"
            echo "TEST_STATUS=failed" >> $GITHUB_OUTPUT
            # Ensure coverage directory exists even if tests fail
            mkdir -p coverage
            # Try to generate coverage with --passWithNoTests if available
            bun run test:coverage --passWithNoTests || echo "Coverage generation attempted"
          fi
          echo "::endgroup::"
        continue-on-error: true

      - name: Test build process
        id: build
        run: |
          echo "::group::Build Process"
          if bun run scripts/build.ts; then
            echo "✅ Build completed successfully"
            echo "BUILD_STATUS=passed" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Build failed - continuing with analysis"
            echo "BUILD_STATUS=failed" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"
        continue-on-error: true

      - name: Test executables (basic smoke test)
        id: executables
        run: |
          echo "::group::Executable Tests"
          EXECUTABLE_STATUS="passed"

          # Test that executables were created and can show help
          if [ -f "dist/copima-cli-windows.exe" ]; then
            echo "✅ Windows executable created"
            file dist/copima-cli-windows.exe
          else
            echo "❌ Windows executable not found"
            EXECUTABLE_STATUS="failed"
          fi

          if [ -f "dist/copima-cli-macos-x64" ]; then
            echo "✅ macOS x64 executable created"
            file dist/copima-cli-macos-x64
          else
            echo "❌ macOS x64 executable not found"
            EXECUTABLE_STATUS="failed"
          fi

          if [ -f "dist/copima-cli-macos-arm64" ]; then
            echo "✅ macOS ARM64 executable created"
            file dist/copima-cli-macos-arm64
          else
            echo "❌ macOS ARM64 executable not found"
            EXECUTABLE_STATUS="failed"
          fi

          echo "EXECUTABLE_STATUS=$EXECUTABLE_STATUS" >> $GITHUB_OUTPUT
          echo "::endgroup::"
        continue-on-error: true

      - name: Test Results Summary
        if: always()
        run: |
          echo "::group::CI Summary"
          echo "## 📊 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          LINT_STATUS="${{ steps.lint.outputs.LINT_STATUS }}"
          TEST_STATUS="${{ steps.tests.outputs.TEST_STATUS }}"
          BUILD_STATUS="${{ steps.build.outputs.BUILD_STATUS }}"
          EXECUTABLE_STATUS="${{ steps.executables.outputs.EXECUTABLE_STATUS }}"

          if [ "$LINT_STATUS" = "passed" ]; then
            echo "| 🔍 Linting | ✅ Passed | No linting issues found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔍 Linting | ⚠️ Issues Found | Code quality issues detected - check logs |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$TEST_STATUS" = "passed" ]; then
            echo "| 🧪 Tests | ✅ Passed | All tests completed successfully |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 Tests | ⚠️ Some Failed | Test failures detected - coverage still generated |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$BUILD_STATUS" = "passed" ]; then
            echo "| 🔨 Build | ✅ Passed | Executables built successfully |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔨 Build | ❌ Failed | Build process encountered errors |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$EXECUTABLE_STATUS" = "passed" ]; then
            echo "| 📦 Executables | ✅ Passed | All platform executables created |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📦 Executables | ❌ Failed | Some executables missing |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** This pipeline continues on test/build failures to provide complete analysis data for debugging." >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"

      - name: Verify coverage files for SonarQube
        id: coverage-check
        if: always()
        run: |
          echo "::group::Coverage File Verification"
          echo "Checking for coverage files..."

          if [ -f "coverage/lcov.info" ]; then
            echo "✅ lcov.info found"
            echo "📊 File size: $(du -h coverage/lcov.info | cut -f1)"
            echo "📝 First 10 lines of lcov.info:"
            head -10 coverage/lcov.info
            echo "COVERAGE_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "❌ lcov.info not found"
            echo "COVERAGE_EXISTS=false" >> $GITHUB_OUTPUT
          fi

          echo "📁 Coverage directory contents:"
          ls -la coverage/ || echo "Coverage directory does not exist"
          echo "::endgroup::"

      - name: SonarQube Scan
        id: sonar-scan
        if: always() && steps.coverage-check.outputs.COVERAGE_EXISTS == 'true'
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: true

      - name: SonarQube Quality Gate check
        id: sonar-quality-gate
        if: always() && steps.sonar-scan.outcome == 'success'
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Upload coverage reports to Codecov
        id: codecov
        if: always() && hashFiles('coverage/lcov.info') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true

      - name: Upload build artifacts
        id: upload-executables
        if: always() && steps.build.outputs.BUILD_STATUS == 'passed'
        uses: actions/upload-artifact@v4
        with:
          name: executables
          path: dist/
          retention-days: 7
        continue-on-error: true

      - name: Upload coverage artifacts
        id: upload-coverage
        if: always() && hashFiles('coverage/**/*') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
        continue-on-error: true

      - name: Upload test results
        id: upload-test-results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            *.log
            test-results.xml
          retention-days: 7
        continue-on-error: true

      - name: Final Analysis Summary
        if: always()
        run: |
          echo "::group::Final Summary"
          echo "## 🔍 Analysis & Artifacts Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Coverage Generation Status
          if [ "${{ steps.coverage-check.outputs.COVERAGE_EXISTS }}" = "true" ]; then
            echo "✅ **Coverage Generation:** lcov.info created successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Coverage Generation:** Failed to create lcov.info" >> $GITHUB_STEP_SUMMARY
          fi

          # SonarQube Status
          if [ "${{ steps.sonar-scan.outcome }}" = "success" ]; then
            echo "✅ **SonarQube Scan:** Completed successfully with coverage" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.coverage-check.outputs.COVERAGE_EXISTS }}" = "false" ]; then
            echo "⚠️ **SonarQube Scan:** Skipped due to missing coverage file" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **SonarQube Scan:** Failed or encountered errors" >> $GITHUB_STEP_SUMMARY
          fi

          # Coverage Upload Status
          if [ "${{ steps.codecov.outcome }}" = "success" ]; then
            echo "✅ **Coverage Upload:** Sent to Codecov" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Coverage Upload:** Failed or no coverage data" >> $GITHUB_STEP_SUMMARY
          fi

          # Artifacts Status
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Available Artifacts:" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.upload-coverage.outcome }}" = "success" ]; then
            echo "- 📊 Coverage Reports (for debugging)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.upload-executables.outcome }}" = "success" ]; then
            echo "- 🚀 Build Executables" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.upload-test-results.outcome }}" = "success" ]; then
            echo "- 🧪 Test Results & Logs" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **Debug Information:** All available artifacts and logs have been preserved for analysis, regardless of step failures." >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"
