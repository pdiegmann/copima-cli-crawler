/* eslint-disable */
import * as types from "./graphql.js";
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  "\n  query FetchComprehensiveGroup($fullPath: ID!) {\n    group(fullPath: $fullPath) {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n          color\n          pipelineConfigurationFullPath\n        }\n      }\n      customEmoji {\n        nodes {\n          id\n          name\n          url\n        }\n      }\n      groupMembers {\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n          }\n        }\n      }\n      labels {\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n        }\n      }\n      milestones {\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n        }\n      }\n      packages {\n        nodes {\n          id\n          name\n          version\n          packageType\n          createdAt\n          updatedAt\n        }\n      }\n      runners {\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n      vulnerabilities {\n        nodes {\n          id\n          title\n          description\n          state\n          severity\n          reportType\n          detectedAt\n          dismissedAt\n          resolvedAt\n          confirmedAt\n        }\n      }\n      workItemTypes {\n        nodes {\n          id\n          name\n          iconName\n        }\n      }\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n      dependencyProxyManifests {\n        nodes {\n          id\n          imageName\n          digest\n          createdAt\n        }\n      }\n      dependencyProxyBlobs {\n        nodes {\n          fileName\n          size\n          createdAt\n        }\n      }\n      dependencyProxySetting {\n        enabled\n      }\n      ciVariables {\n        nodes {\n          id\n          key\n          value\n          variableType\n          protected\n          masked\n          raw\n          environmentScope\n        }\n      }\n    }\n  }\n": typeof types.FetchComprehensiveGroupDocument;
  "\n  query FetchComprehensiveGroups($first: Int, $after: String) {\n    groups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n": typeof types.FetchComprehensiveGroupsDocument;
  "\n  query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      descendantGroups(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          webUrl\n          avatarUrl\n          shareWithGroupLock\n          requireTwoFactorAuthentication\n          twoFactorGracePeriod\n          autoDevopsEnabled\n          emailsDisabled\n          mentionsDisabled\n          parent {\n            id\n            fullPath\n            name\n            path\n            webUrl\n          }\n          subgroupCreationLevel\n          projectCreationLevel\n          actualRepositorySizeLimit\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n          sharedRunnersSetting\n        }\n      }\n    }\n  }\n": typeof types.FetchComprehensiveSubgroupsDocument;
  "\n  query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      projects(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          lastActivityAt\n          webUrl\n          avatarUrl\n          archived\n          forksCount\n          starCount\n          issuesEnabled\n          mergeRequestsEnabled\n          wikiEnabled\n          snippetsEnabled\n          containerRegistryEnabled\n          lfsEnabled\n          requestAccessEnabled\n          nameWithNamespace\n          topics\n          tagList\n          sshUrlToRepo\n          httpUrlToRepo\n          serviceDeskEnabled\n          serviceDeskAddress\n          autocloseReferencedIssues\n          publicJobs\n          sharedRunnersEnabled\n          onlyAllowMergeIfPipelineSucceeds\n          onlyAllowMergeIfAllDiscussionsAreResolved\n          removeSourceBranchAfterMerge\n          printingMergeRequestLinkEnabled\n          allowMergeOnSkippedPipeline\n          complianceFrameworks {\n            nodes {\n              id\n              name\n              description\n              color\n              pipelineConfigurationFullPath\n            }\n          }\n          projectMembers {\n            nodes {\n              id\n              accessLevel {\n                integerValue\n                stringValue\n              }\n              createdAt\n              updatedAt\n              expiresAt\n              user {\n                id\n                username\n                name\n                publicEmail\n                state\n                webUrl\n                avatarUrl\n              }\n            }\n          }\n          repository {\n            exists\n            empty\n            rootRef\n            tree {\n              lastCommit {\n                id\n                sha\n                title\n                message\n                authorName\n                authorEmail\n                authoredDate\n                committedDate\n                webUrl\n              }\n            }\n          }\n          statistics {\n            commitCount\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n          }\n        }\n      }\n    }\n  }\n": typeof types.FetchComprehensiveGroupProjectsDocument;
};
const documents: Documents = {
  "\n  query FetchComprehensiveGroup($fullPath: ID!) {\n    group(fullPath: $fullPath) {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n          color\n          pipelineConfigurationFullPath\n        }\n      }\n      customEmoji {\n        nodes {\n          id\n          name\n          url\n        }\n      }\n      groupMembers {\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n          }\n        }\n      }\n      labels {\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n        }\n      }\n      milestones {\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n        }\n      }\n      packages {\n        nodes {\n          id\n          name\n          version\n          packageType\n          createdAt\n          updatedAt\n        }\n      }\n      runners {\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n      vulnerabilities {\n        nodes {\n          id\n          title\n          description\n          state\n          severity\n          reportType\n          detectedAt\n          dismissedAt\n          resolvedAt\n          confirmedAt\n        }\n      }\n      workItemTypes {\n        nodes {\n          id\n          name\n          iconName\n        }\n      }\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n      dependencyProxyManifests {\n        nodes {\n          id\n          imageName\n          digest\n          createdAt\n        }\n      }\n      dependencyProxyBlobs {\n        nodes {\n          fileName\n          size\n          createdAt\n        }\n      }\n      dependencyProxySetting {\n        enabled\n      }\n      ciVariables {\n        nodes {\n          id\n          key\n          value\n          variableType\n          protected\n          masked\n          raw\n          environmentScope\n        }\n      }\n    }\n  }\n":
    types.FetchComprehensiveGroupDocument,
  "\n  query FetchComprehensiveGroups($first: Int, $after: String) {\n    groups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n":
    types.FetchComprehensiveGroupsDocument,
  "\n  query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      descendantGroups(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          webUrl\n          avatarUrl\n          shareWithGroupLock\n          requireTwoFactorAuthentication\n          twoFactorGracePeriod\n          autoDevopsEnabled\n          emailsDisabled\n          mentionsDisabled\n          parent {\n            id\n            fullPath\n            name\n            path\n            webUrl\n          }\n          subgroupCreationLevel\n          projectCreationLevel\n          actualRepositorySizeLimit\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n          sharedRunnersSetting\n        }\n      }\n    }\n  }\n":
    types.FetchComprehensiveSubgroupsDocument,
  "\n  query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      projects(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          lastActivityAt\n          webUrl\n          avatarUrl\n          archived\n          forksCount\n          starCount\n          issuesEnabled\n          mergeRequestsEnabled\n          wikiEnabled\n          snippetsEnabled\n          containerRegistryEnabled\n          lfsEnabled\n          requestAccessEnabled\n          nameWithNamespace\n          topics\n          tagList\n          sshUrlToRepo\n          httpUrlToRepo\n          serviceDeskEnabled\n          serviceDeskAddress\n          autocloseReferencedIssues\n          publicJobs\n          sharedRunnersEnabled\n          onlyAllowMergeIfPipelineSucceeds\n          onlyAllowMergeIfAllDiscussionsAreResolved\n          removeSourceBranchAfterMerge\n          printingMergeRequestLinkEnabled\n          allowMergeOnSkippedPipeline\n          complianceFrameworks {\n            nodes {\n              id\n              name\n              description\n              color\n              pipelineConfigurationFullPath\n            }\n          }\n          projectMembers {\n            nodes {\n              id\n              accessLevel {\n                integerValue\n                stringValue\n              }\n              createdAt\n              updatedAt\n              expiresAt\n              user {\n                id\n                username\n                name\n                publicEmail\n                state\n                webUrl\n                avatarUrl\n              }\n            }\n          }\n          repository {\n            exists\n            empty\n            rootRef\n            tree {\n              lastCommit {\n                id\n                sha\n                title\n                message\n                authorName\n                authorEmail\n                authoredDate\n                committedDate\n                webUrl\n              }\n            }\n          }\n          statistics {\n            commitCount\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n          }\n        }\n      }\n    }\n  }\n":
    types.FetchComprehensiveGroupProjectsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveGroup($fullPath: ID!) {\n    group(fullPath: $fullPath) {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n          color\n          pipelineConfigurationFullPath\n        }\n      }\n      customEmoji {\n        nodes {\n          id\n          name\n          url\n        }\n      }\n      groupMembers {\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n          }\n        }\n      }\n      labels {\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n        }\n      }\n      milestones {\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n        }\n      }\n      packages {\n        nodes {\n          id\n          name\n          version\n          packageType\n          createdAt\n          updatedAt\n        }\n      }\n      runners {\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n      vulnerabilities {\n        nodes {\n          id\n          title\n          description\n          state\n          severity\n          reportType\n          detectedAt\n          dismissedAt\n          resolvedAt\n          confirmedAt\n        }\n      }\n      workItemTypes {\n        nodes {\n          id\n          name\n          iconName\n        }\n      }\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n      dependencyProxyManifests {\n        nodes {\n          id\n          imageName\n          digest\n          createdAt\n        }\n      }\n      dependencyProxyBlobs {\n        nodes {\n          fileName\n          size\n          createdAt\n        }\n      }\n      dependencyProxySetting {\n        enabled\n      }\n      ciVariables {\n        nodes {\n          id\n          key\n          value\n          variableType\n          protected\n          masked\n          raw\n          environmentScope\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveGroup($fullPath: ID!) {\n    group(fullPath: $fullPath) {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n          color\n          pipelineConfigurationFullPath\n        }\n      }\n      customEmoji {\n        nodes {\n          id\n          name\n          url\n        }\n      }\n      groupMembers {\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n          }\n        }\n      }\n      labels {\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n        }\n      }\n      milestones {\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n        }\n      }\n      packages {\n        nodes {\n          id\n          name\n          version\n          packageType\n          createdAt\n          updatedAt\n        }\n      }\n      runners {\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n      vulnerabilities {\n        nodes {\n          id\n          title\n          description\n          state\n          severity\n          reportType\n          detectedAt\n          dismissedAt\n          resolvedAt\n          confirmedAt\n        }\n      }\n      workItemTypes {\n        nodes {\n          id\n          name\n          iconName\n        }\n      }\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n      dependencyProxyManifests {\n        nodes {\n          id\n          imageName\n          digest\n          createdAt\n        }\n      }\n      dependencyProxyBlobs {\n        nodes {\n          fileName\n          size\n          createdAt\n        }\n      }\n      dependencyProxySetting {\n        enabled\n      }\n      ciVariables {\n        nodes {\n          id\n          key\n          value\n          variableType\n          protected\n          masked\n          raw\n          environmentScope\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveGroups($first: Int, $after: String) {\n    groups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveGroups($first: Int, $after: String) {\n    groups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      descendantGroups(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          webUrl\n          avatarUrl\n          shareWithGroupLock\n          requireTwoFactorAuthentication\n          twoFactorGracePeriod\n          autoDevopsEnabled\n          emailsDisabled\n          mentionsDisabled\n          parent {\n            id\n            fullPath\n            name\n            path\n            webUrl\n          }\n          subgroupCreationLevel\n          projectCreationLevel\n          actualRepositorySizeLimit\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n          sharedRunnersSetting\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      descendantGroups(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          webUrl\n          avatarUrl\n          shareWithGroupLock\n          requireTwoFactorAuthentication\n          twoFactorGracePeriod\n          autoDevopsEnabled\n          emailsDisabled\n          mentionsDisabled\n          parent {\n            id\n            fullPath\n            name\n            path\n            webUrl\n          }\n          subgroupCreationLevel\n          projectCreationLevel\n          actualRepositorySizeLimit\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n          sharedRunnersSetting\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      projects(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          lastActivityAt\n          webUrl\n          avatarUrl\n          archived\n          forksCount\n          starCount\n          issuesEnabled\n          mergeRequestsEnabled\n          wikiEnabled\n          snippetsEnabled\n          containerRegistryEnabled\n          lfsEnabled\n          requestAccessEnabled\n          nameWithNamespace\n          topics\n          tagList\n          sshUrlToRepo\n          httpUrlToRepo\n          serviceDeskEnabled\n          serviceDeskAddress\n          autocloseReferencedIssues\n          publicJobs\n          sharedRunnersEnabled\n          onlyAllowMergeIfPipelineSucceeds\n          onlyAllowMergeIfAllDiscussionsAreResolved\n          removeSourceBranchAfterMerge\n          printingMergeRequestLinkEnabled\n          allowMergeOnSkippedPipeline\n          complianceFrameworks {\n            nodes {\n              id\n              name\n              description\n              color\n              pipelineConfigurationFullPath\n            }\n          }\n          projectMembers {\n            nodes {\n              id\n              accessLevel {\n                integerValue\n                stringValue\n              }\n              createdAt\n              updatedAt\n              expiresAt\n              user {\n                id\n                username\n                name\n                publicEmail\n                state\n                webUrl\n                avatarUrl\n              }\n            }\n          }\n          repository {\n            exists\n            empty\n            rootRef\n            tree {\n              lastCommit {\n                id\n                sha\n                title\n                message\n                authorName\n                authorEmail\n                authoredDate\n                committedDate\n                webUrl\n              }\n            }\n          }\n          statistics {\n            commitCount\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n          }\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      projects(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          lastActivityAt\n          webUrl\n          avatarUrl\n          archived\n          forksCount\n          starCount\n          issuesEnabled\n          mergeRequestsEnabled\n          wikiEnabled\n          snippetsEnabled\n          containerRegistryEnabled\n          lfsEnabled\n          requestAccessEnabled\n          nameWithNamespace\n          topics\n          tagList\n          sshUrlToRepo\n          httpUrlToRepo\n          serviceDeskEnabled\n          serviceDeskAddress\n          autocloseReferencedIssues\n          publicJobs\n          sharedRunnersEnabled\n          onlyAllowMergeIfPipelineSucceeds\n          onlyAllowMergeIfAllDiscussionsAreResolved\n          removeSourceBranchAfterMerge\n          printingMergeRequestLinkEnabled\n          allowMergeOnSkippedPipeline\n          complianceFrameworks {\n            nodes {\n              id\n              name\n              description\n              color\n              pipelineConfigurationFullPath\n            }\n          }\n          projectMembers {\n            nodes {\n              id\n              accessLevel {\n                integerValue\n                stringValue\n              }\n              createdAt\n              updatedAt\n              expiresAt\n              user {\n                id\n                username\n                name\n                publicEmail\n                state\n                webUrl\n                avatarUrl\n              }\n            }\n          }\n          repository {\n            exists\n            empty\n            rootRef\n            tree {\n              lastCommit {\n                id\n                sha\n                title\n                message\n                authorName\n                authorEmail\n                authoredDate\n                committedDate\n                webUrl\n              }\n            }\n          }\n          statistics {\n            commitCount\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
