/* eslint-disable */
import * as types from "./graphql.js";
import type { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  "query FetchAdminUsers($first: Int, $after: String) {\n  users(admins: true, first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      userPermissions {\n        createSnippet\n      }\n    }\n  }\n}": typeof types.FetchAdminUsersDocument;
  "query FetchComprehensiveGroup($fullPath: ID!) {\n  group(fullPath: $fullPath) {\n    id\n    name\n    path\n    fullName\n    fullPath\n    description\n    visibility\n    createdAt\n    updatedAt\n    webUrl\n    avatarUrl\n    shareWithGroupLock\n    requireTwoFactorAuthentication\n    twoFactorGracePeriod\n    autoDevopsEnabled\n    emailsDisabled\n    mentionsDisabled\n    parent {\n      id\n      fullPath\n      name\n      path\n      webUrl\n    }\n    subgroupCreationLevel\n    projectCreationLevel\n    actualRepositorySizeLimit\n    lfsEnabled\n    requestAccessEnabled\n    complianceFrameworks {\n      nodes {\n        id\n        name\n        description\n        color\n        pipelineConfigurationFullPath\n      }\n    }\n    customEmoji {\n      nodes {\n        id\n        name\n        url\n      }\n    }\n    groupMembers {\n      nodes {\n        id\n        accessLevel {\n          integerValue\n          stringValue\n        }\n        createdAt\n        updatedAt\n        expiresAt\n        user {\n          id\n          username\n          name\n          publicEmail\n          state\n          webUrl\n          avatarUrl\n        }\n      }\n    }\n    labels {\n      nodes {\n        id\n        title\n        description\n        color\n        textColor\n      }\n    }\n    milestones {\n      nodes {\n        id\n        title\n        description\n        state\n        dueDate\n        startDate\n        createdAt\n        updatedAt\n      }\n    }\n    packages {\n      nodes {\n        id\n        name\n        version\n        packageType\n        createdAt\n        updatedAt\n      }\n    }\n    runners {\n      nodes {\n        id\n        runnerType\n        description\n        contactedAt\n        active\n        status\n        tagList\n      }\n    }\n    timelogs {\n      nodes {\n        id\n        timeSpent\n        spentAt\n        summary\n        user {\n          id\n          username\n          name\n        }\n      }\n    }\n    vulnerabilities {\n      nodes {\n        id\n        title\n        description\n        state\n        severity\n        reportType\n        detectedAt\n        dismissedAt\n        resolvedAt\n        confirmedAt\n      }\n    }\n    workItemTypes {\n      nodes {\n        id\n        name\n        iconName\n      }\n    }\n    rootStorageStatistics {\n      storageSize\n      repositorySize\n      lfsObjectsSize\n      buildArtifactsSize\n      packagesSize\n      snippetsSize\n      uploadsSize\n      wikiSize\n      containerRegistrySize\n      dependencyProxySize\n    }\n    sharedRunnersSetting\n    dependencyProxyManifests {\n      nodes {\n        id\n        imageName\n        digest\n        createdAt\n      }\n    }\n    dependencyProxyBlobs {\n      nodes {\n        fileName\n        size\n        createdAt\n      }\n    }\n    dependencyProxySetting {\n      enabled\n    }\n    ciVariables {\n      nodes {\n        id\n        key\n        value\n        variableType\n        protected\n        masked\n        raw\n        environmentScope\n      }\n    }\n  }\n}": typeof types.FetchComprehensiveGroupDocument;
  "query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n  group(fullPath: $fullPath) {\n    projects(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullPath\n        nameWithNamespace\n        description\n        visibility\n        createdAt\n        updatedAt\n        lastActivityAt\n        webUrl\n        avatarUrl\n        archived\n        forksCount\n        starCount\n        issuesEnabled\n        mergeRequestsEnabled\n        wikiEnabled\n        snippetsEnabled\n        containerRegistryEnabled\n        lfsEnabled\n        requestAccessEnabled\n        publicJobs\n        sharedRunnersEnabled\n        sshUrlToRepo\n        httpUrlToRepo\n        onlyAllowMergeIfPipelineSucceeds\n        onlyAllowMergeIfAllDiscussionsAreResolved\n        removeSourceBranchAfterMerge\n        printingMergeRequestLinkEnabled\n        allowMergeOnSkippedPipeline\n        serviceDeskEnabled\n        serviceDeskAddress\n        topics\n        tagList\n        complianceFrameworks {\n          nodes {\n            id\n            name\n            description\n            color\n            pipelineConfigurationFullPath\n          }\n        }\n        projectMembers {\n          nodes {\n            id\n            accessLevel {\n              integerValue\n              stringValue\n            }\n            createdAt\n            updatedAt\n            expiresAt\n            user {\n              id\n              username\n              name\n              publicEmail\n              state\n              webUrl\n              avatarUrl\n            }\n          }\n        }\n        repository {\n          exists\n          empty\n          rootRef\n          tree {\n            lastCommit {\n              id\n              sha\n              title\n              message\n              authorName\n              authorEmail\n              authoredDate\n              committedDate\n              webUrl\n            }\n          }\n        }\n        statistics {\n          commitCount\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n        }\n        autocloseReferencedIssues\n      }\n    }\n  }\n}": typeof types.FetchComprehensiveGroupProjectsDocument;
  "query FetchComprehensiveGroups($first: Int, $after: String) {\n  groups(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n    }\n  }\n}": typeof types.FetchComprehensiveGroupsDocument;
  "query FetchComprehensiveProject($fullPath: ID!) {\n  project(fullPath: $fullPath) {\n    id\n    name\n    path\n    fullPath\n    nameWithNamespace\n    description\n    visibility\n    createdAt\n    updatedAt\n    lastActivityAt\n    webUrl\n    avatarUrl\n    archived\n    forksCount\n    starCount\n    openIssuesCount\n    issuesEnabled\n    mergeRequestsEnabled\n    wikiEnabled\n    snippetsEnabled\n    jobsEnabled\n    containerRegistryEnabled\n    lfsEnabled\n    requestAccessEnabled\n    publicJobs\n    sharedRunnersEnabled\n    issuesAccessLevel {\n      integerValue\n      stringValue\n    }\n    mergeRequestsAccessLevel {\n      integerValue\n      stringValue\n    }\n    forkingAccessLevel {\n      integerValue\n      stringValue\n    }\n    sshUrlToRepo\n    httpUrlToRepo\n    onlyAllowMergeIfPipelineSucceeds\n    onlyAllowMergeIfAllDiscussionsAreResolved\n    removeSourceBranchAfterMerge\n    printingMergeRequestLinkEnabled\n    serviceDeskEnabled\n    topics\n    tagList\n    group {\n      id\n      name\n      path\n      fullPath\n      webUrl\n    }\n    namespace {\n      id\n      name\n      path\n      fullPath\n    }\n    projectMembers(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        accessLevel {\n          integerValue\n          stringValue\n        }\n        createdAt\n        updatedAt\n        expiresAt\n        user {\n          id\n          username\n          name\n          publicEmail\n          state\n          webUrl\n          avatarUrl\n          bio\n          location\n          organization\n          linkedin\n          twitter\n          lastActivityOn\n          createdAt\n          userPermissions {\n            createSnippet\n          }\n        }\n      }\n    }\n    repository {\n      exists\n      empty\n      rootRef\n      tree {\n        lastCommit {\n          id\n          shortId\n          title\n          message\n          authorName\n          authorEmail\n          authoredDate\n          committedDate\n        }\n      }\n    }\n    statistics {\n      commitCount\n      storageSize\n      repositorySize\n      lfsObjectsSize\n      buildArtifactsSize\n      packagesSize\n      snippetsSize\n      uploadsSize\n      wikiSize\n    }\n    labels(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        description\n        color\n        textColor\n        createdAt\n        updatedAt\n      }\n    }\n    milestones(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        description\n        state\n        dueDate\n        startDate\n        createdAt\n        updatedAt\n        expired\n        upcoming\n        groupMilestone\n        projectMilestone\n        stats {\n          totalIssuesCount\n          closedIssuesCount\n        }\n      }\n    }\n    issues(first: 20, sort: UPDATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        closedAt\n        dueDate\n        confidential\n        discussionLocked\n        upvotes\n        downvotes\n        userNotesCount\n        webUrl\n        relativePosition\n        emailsDisabled\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            color\n            description\n          }\n        }\n        milestone {\n          id\n          title\n          state\n          dueDate\n        }\n        taskCompletionStatus {\n          count\n          completedCount\n        }\n      }\n    }\n    mergeRequests(first: 20, sort: UPDATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        mergedAt\n        closedAt\n        sourceBranch\n        targetBranch\n        sourceBranchExists\n        targetBranchExists\n        conflicts\n        mergeable\n        mergeOngoing\n        draft\n        forceRemoveSourceBranch\n        shouldRemoveSourceBranch\n        rebaseInProgress\n        diffHeadSha\n        mergeCommitSha\n        commitCount\n        downvotes\n        upvotes\n        userNotesCount\n        webUrl\n        subscribed\n        headPipeline {\n          id\n          iid\n          status\n          detailedStatus {\n            id\n            group\n            icon\n            label\n            text\n            tooltip\n          }\n        }\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        reviewers {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            color\n            description\n          }\n        }\n        milestone {\n          id\n          title\n          state\n          dueDate\n        }\n        taskCompletionStatus {\n          count\n          completedCount\n        }\n      }\n    }\n    environments(first: 50) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        slug\n        state\n        path\n        externalUrl\n        environmentType\n        createdAt\n        updatedAt\n        autoStopAt\n        tier\n      }\n    }\n    releases(first: 20, sort: RELEASED_AT_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        name\n        tagName\n        tagPath\n        description\n        descriptionHtml\n        releasedAt\n        createdAt\n        upcomingRelease\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        commit {\n          id\n          shortId\n          title\n          authorName\n          authoredDate\n        }\n        assets {\n          count\n          sources {\n            nodes {\n              url\n              format\n            }\n          }\n          links {\n            nodes {\n              id\n              name\n              url\n              directAssetUrl\n              linkType\n            }\n          }\n        }\n        evidences {\n          nodes {\n            id\n            filepath\n            collectedAt\n          }\n        }\n      }\n    }\n    packages(first: 20, sort: CREATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        version\n        packageType\n        status\n        createdAt\n        updatedAt\n      }\n    }\n    snippets(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        fileName\n        description\n        visibilityLevel\n        createdAt\n        updatedAt\n        webUrl\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        blobs {\n          nodes {\n            name\n            path\n            size\n            mode\n          }\n        }\n      }\n    }\n    runners(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        runnerType\n        description\n        contactedAt\n        active\n        status\n        tagList\n        locked\n        maximumTimeout\n        accessLevel\n        paused\n        maintenanceNote\n        jobCount\n      }\n    }\n    boards(first: 10) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        hideBacklogList\n        hideClosedList\n        createdAt\n        updatedAt\n        webUrl\n        lists {\n          nodes {\n            id\n            listType\n            position\n            label {\n              id\n              title\n              color\n            }\n            milestone {\n              id\n              title\n            }\n            assignee {\n              id\n              username\n              name\n            }\n          }\n        }\n      }\n    }\n    containerRepositories(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        path\n        location\n        createdAt\n        updatedAt\n        expirationPolicyStartedAt\n        expirationPolicyCleanupStatus\n        status\n        tagsCount\n      }\n    }\n    pipelines(first: 10) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        sha\n        beforeSha\n        status\n        detailedStatus {\n          id\n          group\n          icon\n          label\n          text\n          tooltip\n        }\n        configSource\n        duration\n        queuedDuration\n        coverage\n        createdAt\n        updatedAt\n        startedAt\n        finishedAt\n        committedAt\n        ref\n        user {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        commit {\n          id\n          shortId\n          title\n          message\n          authorName\n          authorEmail\n          authoredDate\n        }\n      }\n    }\n    complianceFrameworks {\n      nodes {\n        id\n        name\n        description\n      }\n    }\n  }\n}": typeof types.FetchComprehensiveProjectDocument;
  "query FetchComprehensiveProjects($first: Int, $after: String) {\n  projects(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    nodes {\n      id\n      name\n      path\n      fullPath\n      nameWithNamespace\n      description\n      visibility\n      createdAt\n      updatedAt\n      lastActivityAt\n      webUrl\n      avatarUrl\n      archived\n      issuesEnabled\n      mergeRequestsEnabled\n      wikiEnabled\n      snippetsEnabled\n      jobsEnabled\n      containerRegistryEnabled\n      lfsEnabled\n      openIssuesCount\n      starCount\n      forksCount\n      namespace {\n        id\n        name\n        path\n        fullPath\n      }\n    }\n  }\n}": typeof types.FetchComprehensiveProjectsDocument;
  "query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n  group(fullPath: $fullPath) {\n    descendantGroups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n}": typeof types.FetchComprehensiveSubgroupsDocument;
  "query FetchComprehensiveUser($id: UserID!) {\n  user(id: $id) {\n    id\n    username\n    name\n    publicEmail\n    location\n    webUrl\n    avatarUrl\n    state\n    bio\n    pronouns\n    organization\n    jobTitle\n    linkedin\n    twitter\n    createdAt\n    lastActivityOn\n    commitEmail\n    status {\n      availability\n      emoji\n      message\n      messageHtml\n      clearStatusAt\n    }\n    namespace {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      lfsEnabled\n      requestAccessEnabled\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n    }\n    userPermissions {\n      createSnippet\n    }\n    gitpodEnabled\n    preferencesGitpodPath\n    assignedMergeRequests {\n      count\n    }\n    authoredMergeRequests {\n      count\n    }\n    snippets {\n      nodes {\n        id\n        title\n        fileName\n        description\n        visibilityLevel\n        createdAt\n        updatedAt\n        author {\n          id\n          username\n          name\n        }\n      }\n    }\n    starredProjects {\n      nodes {\n        id\n        name\n        path\n        fullPath\n        description\n        visibility\n        avatarUrl\n        starCount\n        forksCount\n        lastActivityAt\n      }\n    }\n    groups {\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        avatarUrl\n        projectCreationLevel\n        subgroupCreationLevel\n      }\n    }\n    callouts {\n      nodes {\n        featureName\n        dismissedAt\n      }\n    }\n    todos {\n      nodes {\n        id\n        action\n        targetType\n        createdAt\n        state\n        target {\n          ... on Issue {\n            id\n            title\n          }\n          ... on MergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n    timelogs {\n      nodes {\n        id\n        timeSpent\n        spentAt\n        summary\n        issue {\n          id\n          title\n        }\n        mergeRequest {\n          id\n          title\n        }\n      }\n    }\n  }\n}": typeof types.FetchComprehensiveUserDocument;
  "query FetchComprehensiveUsers($first: Int, $after: String) {\n  users(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n      userPermissions {\n        createSnippet\n      }\n      gitpodEnabled\n      preferencesGitpodPath\n      assignedMergeRequests {\n        count\n      }\n      authoredMergeRequests {\n        count\n      }\n      snippets {\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n        }\n      }\n      starredProjects {\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          avatarUrl\n          starCount\n          forksCount\n        }\n      }\n      groups {\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          avatarUrl\n        }\n      }\n      callouts {\n        nodes {\n          featureName\n          dismissedAt\n        }\n      }\n      todos {\n        nodes {\n          id\n          action\n          targetType\n          createdAt\n          state\n          target {\n            ... on Issue {\n              id\n              title\n            }\n            ... on MergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          issue {\n            id\n            title\n          }\n          mergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n}": typeof types.FetchComprehensiveUsersDocument;
  "query FetchProjectIssues($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    issues(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        closedAt\n        author {\n          id\n          username\n          name\n          publicEmail\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            description\n            color\n            textColor\n          }\n        }\n        milestone {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n        }\n        webUrl\n      }\n    }\n  }\n}": typeof types.FetchProjectIssuesDocument;
  "query FetchProjectMergeRequests($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    mergeRequests(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        mergedAt\n        closedAt\n        sourceBranch\n        targetBranch\n        author {\n          id\n          username\n          name\n          publicEmail\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        reviewers {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            description\n            color\n            textColor\n          }\n        }\n        milestone {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n        }\n        webUrl\n      }\n    }\n  }\n}": typeof types.FetchProjectMergeRequestsDocument;
  "query FetchProjectPipelines($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    pipelines(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        sha\n        ref\n        status\n        source\n        createdAt\n        updatedAt\n        startedAt\n        finishedAt\n        duration\n        coverage\n        user {\n          id\n          username\n          name\n        }\n      }\n    }\n  }\n}": typeof types.FetchProjectPipelinesDocument;
  "query FetchUsersByUsernames($usernames: [String!]!, $first: Int, $after: String) {\n  users(usernames: $usernames, first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n      userPermissions {\n        createSnippet\n      }\n      gitpodEnabled\n      preferencesGitpodPath\n    }\n  }\n}": typeof types.FetchUsersByUsernamesDocument;
};
const documents: Documents = {
  "query FetchAdminUsers($first: Int, $after: String) {\n  users(admins: true, first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      userPermissions {\n        createSnippet\n      }\n    }\n  }\n}":
    types.FetchAdminUsersDocument,
  "query FetchComprehensiveGroup($fullPath: ID!) {\n  group(fullPath: $fullPath) {\n    id\n    name\n    path\n    fullName\n    fullPath\n    description\n    visibility\n    createdAt\n    updatedAt\n    webUrl\n    avatarUrl\n    shareWithGroupLock\n    requireTwoFactorAuthentication\n    twoFactorGracePeriod\n    autoDevopsEnabled\n    emailsDisabled\n    mentionsDisabled\n    parent {\n      id\n      fullPath\n      name\n      path\n      webUrl\n    }\n    subgroupCreationLevel\n    projectCreationLevel\n    actualRepositorySizeLimit\n    lfsEnabled\n    requestAccessEnabled\n    complianceFrameworks {\n      nodes {\n        id\n        name\n        description\n        color\n        pipelineConfigurationFullPath\n      }\n    }\n    customEmoji {\n      nodes {\n        id\n        name\n        url\n      }\n    }\n    groupMembers {\n      nodes {\n        id\n        accessLevel {\n          integerValue\n          stringValue\n        }\n        createdAt\n        updatedAt\n        expiresAt\n        user {\n          id\n          username\n          name\n          publicEmail\n          state\n          webUrl\n          avatarUrl\n        }\n      }\n    }\n    labels {\n      nodes {\n        id\n        title\n        description\n        color\n        textColor\n      }\n    }\n    milestones {\n      nodes {\n        id\n        title\n        description\n        state\n        dueDate\n        startDate\n        createdAt\n        updatedAt\n      }\n    }\n    packages {\n      nodes {\n        id\n        name\n        version\n        packageType\n        createdAt\n        updatedAt\n      }\n    }\n    runners {\n      nodes {\n        id\n        runnerType\n        description\n        contactedAt\n        active\n        status\n        tagList\n      }\n    }\n    timelogs {\n      nodes {\n        id\n        timeSpent\n        spentAt\n        summary\n        user {\n          id\n          username\n          name\n        }\n      }\n    }\n    vulnerabilities {\n      nodes {\n        id\n        title\n        description\n        state\n        severity\n        reportType\n        detectedAt\n        dismissedAt\n        resolvedAt\n        confirmedAt\n      }\n    }\n    workItemTypes {\n      nodes {\n        id\n        name\n        iconName\n      }\n    }\n    rootStorageStatistics {\n      storageSize\n      repositorySize\n      lfsObjectsSize\n      buildArtifactsSize\n      packagesSize\n      snippetsSize\n      uploadsSize\n      wikiSize\n      containerRegistrySize\n      dependencyProxySize\n    }\n    sharedRunnersSetting\n    dependencyProxyManifests {\n      nodes {\n        id\n        imageName\n        digest\n        createdAt\n      }\n    }\n    dependencyProxyBlobs {\n      nodes {\n        fileName\n        size\n        createdAt\n      }\n    }\n    dependencyProxySetting {\n      enabled\n    }\n    ciVariables {\n      nodes {\n        id\n        key\n        value\n        variableType\n        protected\n        masked\n        raw\n        environmentScope\n      }\n    }\n  }\n}":
    types.FetchComprehensiveGroupDocument,
  "query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n  group(fullPath: $fullPath) {\n    projects(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullPath\n        nameWithNamespace\n        description\n        visibility\n        createdAt\n        updatedAt\n        lastActivityAt\n        webUrl\n        avatarUrl\n        archived\n        forksCount\n        starCount\n        issuesEnabled\n        mergeRequestsEnabled\n        wikiEnabled\n        snippetsEnabled\n        containerRegistryEnabled\n        lfsEnabled\n        requestAccessEnabled\n        publicJobs\n        sharedRunnersEnabled\n        sshUrlToRepo\n        httpUrlToRepo\n        onlyAllowMergeIfPipelineSucceeds\n        onlyAllowMergeIfAllDiscussionsAreResolved\n        removeSourceBranchAfterMerge\n        printingMergeRequestLinkEnabled\n        allowMergeOnSkippedPipeline\n        serviceDeskEnabled\n        serviceDeskAddress\n        topics\n        tagList\n        complianceFrameworks {\n          nodes {\n            id\n            name\n            description\n            color\n            pipelineConfigurationFullPath\n          }\n        }\n        projectMembers {\n          nodes {\n            id\n            accessLevel {\n              integerValue\n              stringValue\n            }\n            createdAt\n            updatedAt\n            expiresAt\n            user {\n              id\n              username\n              name\n              publicEmail\n              state\n              webUrl\n              avatarUrl\n            }\n          }\n        }\n        repository {\n          exists\n          empty\n          rootRef\n          tree {\n            lastCommit {\n              id\n              sha\n              title\n              message\n              authorName\n              authorEmail\n              authoredDate\n              committedDate\n              webUrl\n            }\n          }\n        }\n        statistics {\n          commitCount\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n        }\n        autocloseReferencedIssues\n      }\n    }\n  }\n}":
    types.FetchComprehensiveGroupProjectsDocument,
  "query FetchComprehensiveGroups($first: Int, $after: String) {\n  groups(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n    }\n  }\n}":
    types.FetchComprehensiveGroupsDocument,
  "query FetchComprehensiveProject($fullPath: ID!) {\n  project(fullPath: $fullPath) {\n    id\n    name\n    path\n    fullPath\n    nameWithNamespace\n    description\n    visibility\n    createdAt\n    updatedAt\n    lastActivityAt\n    webUrl\n    avatarUrl\n    archived\n    forksCount\n    starCount\n    openIssuesCount\n    issuesEnabled\n    mergeRequestsEnabled\n    wikiEnabled\n    snippetsEnabled\n    jobsEnabled\n    containerRegistryEnabled\n    lfsEnabled\n    requestAccessEnabled\n    publicJobs\n    sharedRunnersEnabled\n    issuesAccessLevel {\n      integerValue\n      stringValue\n    }\n    mergeRequestsAccessLevel {\n      integerValue\n      stringValue\n    }\n    forkingAccessLevel {\n      integerValue\n      stringValue\n    }\n    sshUrlToRepo\n    httpUrlToRepo\n    onlyAllowMergeIfPipelineSucceeds\n    onlyAllowMergeIfAllDiscussionsAreResolved\n    removeSourceBranchAfterMerge\n    printingMergeRequestLinkEnabled\n    serviceDeskEnabled\n    topics\n    tagList\n    group {\n      id\n      name\n      path\n      fullPath\n      webUrl\n    }\n    namespace {\n      id\n      name\n      path\n      fullPath\n    }\n    projectMembers(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        accessLevel {\n          integerValue\n          stringValue\n        }\n        createdAt\n        updatedAt\n        expiresAt\n        user {\n          id\n          username\n          name\n          publicEmail\n          state\n          webUrl\n          avatarUrl\n          bio\n          location\n          organization\n          linkedin\n          twitter\n          lastActivityOn\n          createdAt\n          userPermissions {\n            createSnippet\n          }\n        }\n      }\n    }\n    repository {\n      exists\n      empty\n      rootRef\n      tree {\n        lastCommit {\n          id\n          shortId\n          title\n          message\n          authorName\n          authorEmail\n          authoredDate\n          committedDate\n        }\n      }\n    }\n    statistics {\n      commitCount\n      storageSize\n      repositorySize\n      lfsObjectsSize\n      buildArtifactsSize\n      packagesSize\n      snippetsSize\n      uploadsSize\n      wikiSize\n    }\n    labels(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        description\n        color\n        textColor\n        createdAt\n        updatedAt\n      }\n    }\n    milestones(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        description\n        state\n        dueDate\n        startDate\n        createdAt\n        updatedAt\n        expired\n        upcoming\n        groupMilestone\n        projectMilestone\n        stats {\n          totalIssuesCount\n          closedIssuesCount\n        }\n      }\n    }\n    issues(first: 20, sort: UPDATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        closedAt\n        dueDate\n        confidential\n        discussionLocked\n        upvotes\n        downvotes\n        userNotesCount\n        webUrl\n        relativePosition\n        emailsDisabled\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            color\n            description\n          }\n        }\n        milestone {\n          id\n          title\n          state\n          dueDate\n        }\n        taskCompletionStatus {\n          count\n          completedCount\n        }\n      }\n    }\n    mergeRequests(first: 20, sort: UPDATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        mergedAt\n        closedAt\n        sourceBranch\n        targetBranch\n        sourceBranchExists\n        targetBranchExists\n        conflicts\n        mergeable\n        mergeOngoing\n        draft\n        forceRemoveSourceBranch\n        shouldRemoveSourceBranch\n        rebaseInProgress\n        diffHeadSha\n        mergeCommitSha\n        commitCount\n        downvotes\n        upvotes\n        userNotesCount\n        webUrl\n        subscribed\n        headPipeline {\n          id\n          iid\n          status\n          detailedStatus {\n            id\n            group\n            icon\n            label\n            text\n            tooltip\n          }\n        }\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        reviewers {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            color\n            description\n          }\n        }\n        milestone {\n          id\n          title\n          state\n          dueDate\n        }\n        taskCompletionStatus {\n          count\n          completedCount\n        }\n      }\n    }\n    environments(first: 50) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        slug\n        state\n        path\n        externalUrl\n        environmentType\n        createdAt\n        updatedAt\n        autoStopAt\n        tier\n      }\n    }\n    releases(first: 20, sort: RELEASED_AT_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        name\n        tagName\n        tagPath\n        description\n        descriptionHtml\n        releasedAt\n        createdAt\n        upcomingRelease\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        commit {\n          id\n          shortId\n          title\n          authorName\n          authoredDate\n        }\n        assets {\n          count\n          sources {\n            nodes {\n              url\n              format\n            }\n          }\n          links {\n            nodes {\n              id\n              name\n              url\n              directAssetUrl\n              linkType\n            }\n          }\n        }\n        evidences {\n          nodes {\n            id\n            filepath\n            collectedAt\n          }\n        }\n      }\n    }\n    packages(first: 20, sort: CREATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        version\n        packageType\n        status\n        createdAt\n        updatedAt\n      }\n    }\n    snippets(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        fileName\n        description\n        visibilityLevel\n        createdAt\n        updatedAt\n        webUrl\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        blobs {\n          nodes {\n            name\n            path\n            size\n            mode\n          }\n        }\n      }\n    }\n    runners(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        runnerType\n        description\n        contactedAt\n        active\n        status\n        tagList\n        locked\n        maximumTimeout\n        accessLevel\n        paused\n        maintenanceNote\n        jobCount\n      }\n    }\n    boards(first: 10) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        hideBacklogList\n        hideClosedList\n        createdAt\n        updatedAt\n        webUrl\n        lists {\n          nodes {\n            id\n            listType\n            position\n            label {\n              id\n              title\n              color\n            }\n            milestone {\n              id\n              title\n            }\n            assignee {\n              id\n              username\n              name\n            }\n          }\n        }\n      }\n    }\n    containerRepositories(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        path\n        location\n        createdAt\n        updatedAt\n        expirationPolicyStartedAt\n        expirationPolicyCleanupStatus\n        status\n        tagsCount\n      }\n    }\n    pipelines(first: 10) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        sha\n        beforeSha\n        status\n        detailedStatus {\n          id\n          group\n          icon\n          label\n          text\n          tooltip\n        }\n        configSource\n        duration\n        queuedDuration\n        coverage\n        createdAt\n        updatedAt\n        startedAt\n        finishedAt\n        committedAt\n        ref\n        user {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        commit {\n          id\n          shortId\n          title\n          message\n          authorName\n          authorEmail\n          authoredDate\n        }\n      }\n    }\n    complianceFrameworks {\n      nodes {\n        id\n        name\n        description\n      }\n    }\n  }\n}":
    types.FetchComprehensiveProjectDocument,
  "query FetchComprehensiveProjects($first: Int, $after: String) {\n  projects(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    nodes {\n      id\n      name\n      path\n      fullPath\n      nameWithNamespace\n      description\n      visibility\n      createdAt\n      updatedAt\n      lastActivityAt\n      webUrl\n      avatarUrl\n      archived\n      issuesEnabled\n      mergeRequestsEnabled\n      wikiEnabled\n      snippetsEnabled\n      jobsEnabled\n      containerRegistryEnabled\n      lfsEnabled\n      openIssuesCount\n      starCount\n      forksCount\n      namespace {\n        id\n        name\n        path\n        fullPath\n      }\n    }\n  }\n}":
    types.FetchComprehensiveProjectsDocument,
  "query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n  group(fullPath: $fullPath) {\n    descendantGroups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n}":
    types.FetchComprehensiveSubgroupsDocument,
  "query FetchComprehensiveUser($id: UserID!) {\n  user(id: $id) {\n    id\n    username\n    name\n    publicEmail\n    location\n    webUrl\n    avatarUrl\n    state\n    bio\n    pronouns\n    organization\n    jobTitle\n    linkedin\n    twitter\n    createdAt\n    lastActivityOn\n    commitEmail\n    status {\n      availability\n      emoji\n      message\n      messageHtml\n      clearStatusAt\n    }\n    namespace {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      lfsEnabled\n      requestAccessEnabled\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n    }\n    userPermissions {\n      createSnippet\n    }\n    gitpodEnabled\n    preferencesGitpodPath\n    assignedMergeRequests {\n      count\n    }\n    authoredMergeRequests {\n      count\n    }\n    snippets {\n      nodes {\n        id\n        title\n        fileName\n        description\n        visibilityLevel\n        createdAt\n        updatedAt\n        author {\n          id\n          username\n          name\n        }\n      }\n    }\n    starredProjects {\n      nodes {\n        id\n        name\n        path\n        fullPath\n        description\n        visibility\n        avatarUrl\n        starCount\n        forksCount\n        lastActivityAt\n      }\n    }\n    groups {\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        avatarUrl\n        projectCreationLevel\n        subgroupCreationLevel\n      }\n    }\n    callouts {\n      nodes {\n        featureName\n        dismissedAt\n      }\n    }\n    todos {\n      nodes {\n        id\n        action\n        targetType\n        createdAt\n        state\n        target {\n          ... on Issue {\n            id\n            title\n          }\n          ... on MergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n    timelogs {\n      nodes {\n        id\n        timeSpent\n        spentAt\n        summary\n        issue {\n          id\n          title\n        }\n        mergeRequest {\n          id\n          title\n        }\n      }\n    }\n  }\n}":
    types.FetchComprehensiveUserDocument,
  "query FetchComprehensiveUsers($first: Int, $after: String) {\n  users(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n      userPermissions {\n        createSnippet\n      }\n      gitpodEnabled\n      preferencesGitpodPath\n      assignedMergeRequests {\n        count\n      }\n      authoredMergeRequests {\n        count\n      }\n      snippets {\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n        }\n      }\n      starredProjects {\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          avatarUrl\n          starCount\n          forksCount\n        }\n      }\n      groups {\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          avatarUrl\n        }\n      }\n      callouts {\n        nodes {\n          featureName\n          dismissedAt\n        }\n      }\n      todos {\n        nodes {\n          id\n          action\n          targetType\n          createdAt\n          state\n          target {\n            ... on Issue {\n              id\n              title\n            }\n            ... on MergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          issue {\n            id\n            title\n          }\n          mergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n}":
    types.FetchComprehensiveUsersDocument,
  "query FetchProjectIssues($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    issues(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        closedAt\n        author {\n          id\n          username\n          name\n          publicEmail\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            description\n            color\n            textColor\n          }\n        }\n        milestone {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n        }\n        webUrl\n      }\n    }\n  }\n}":
    types.FetchProjectIssuesDocument,
  "query FetchProjectMergeRequests($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    mergeRequests(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        mergedAt\n        closedAt\n        sourceBranch\n        targetBranch\n        author {\n          id\n          username\n          name\n          publicEmail\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        reviewers {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            description\n            color\n            textColor\n          }\n        }\n        milestone {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n        }\n        webUrl\n      }\n    }\n  }\n}":
    types.FetchProjectMergeRequestsDocument,
  "query FetchProjectPipelines($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    pipelines(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        sha\n        ref\n        status\n        source\n        createdAt\n        updatedAt\n        startedAt\n        finishedAt\n        duration\n        coverage\n        user {\n          id\n          username\n          name\n        }\n      }\n    }\n  }\n}":
    types.FetchProjectPipelinesDocument,
  "query FetchUsersByUsernames($usernames: [String!]!, $first: Int, $after: String) {\n  users(usernames: $usernames, first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n      userPermissions {\n        createSnippet\n      }\n      gitpodEnabled\n      preferencesGitpodPath\n    }\n  }\n}":
    types.FetchUsersByUsernamesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchAdminUsers($first: Int, $after: String) {\n  users(admins: true, first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      userPermissions {\n        createSnippet\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchAdminUsers($first: Int, $after: String) {\n  users(admins: true, first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      userPermissions {\n        createSnippet\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchComprehensiveGroup($fullPath: ID!) {\n  group(fullPath: $fullPath) {\n    id\n    name\n    path\n    fullName\n    fullPath\n    description\n    visibility\n    createdAt\n    updatedAt\n    webUrl\n    avatarUrl\n    shareWithGroupLock\n    requireTwoFactorAuthentication\n    twoFactorGracePeriod\n    autoDevopsEnabled\n    emailsDisabled\n    mentionsDisabled\n    parent {\n      id\n      fullPath\n      name\n      path\n      webUrl\n    }\n    subgroupCreationLevel\n    projectCreationLevel\n    actualRepositorySizeLimit\n    lfsEnabled\n    requestAccessEnabled\n    complianceFrameworks {\n      nodes {\n        id\n        name\n        description\n        color\n        pipelineConfigurationFullPath\n      }\n    }\n    customEmoji {\n      nodes {\n        id\n        name\n        url\n      }\n    }\n    groupMembers {\n      nodes {\n        id\n        accessLevel {\n          integerValue\n          stringValue\n        }\n        createdAt\n        updatedAt\n        expiresAt\n        user {\n          id\n          username\n          name\n          publicEmail\n          state\n          webUrl\n          avatarUrl\n        }\n      }\n    }\n    labels {\n      nodes {\n        id\n        title\n        description\n        color\n        textColor\n      }\n    }\n    milestones {\n      nodes {\n        id\n        title\n        description\n        state\n        dueDate\n        startDate\n        createdAt\n        updatedAt\n      }\n    }\n    packages {\n      nodes {\n        id\n        name\n        version\n        packageType\n        createdAt\n        updatedAt\n      }\n    }\n    runners {\n      nodes {\n        id\n        runnerType\n        description\n        contactedAt\n        active\n        status\n        tagList\n      }\n    }\n    timelogs {\n      nodes {\n        id\n        timeSpent\n        spentAt\n        summary\n        user {\n          id\n          username\n          name\n        }\n      }\n    }\n    vulnerabilities {\n      nodes {\n        id\n        title\n        description\n        state\n        severity\n        reportType\n        detectedAt\n        dismissedAt\n        resolvedAt\n        confirmedAt\n      }\n    }\n    workItemTypes {\n      nodes {\n        id\n        name\n        iconName\n      }\n    }\n    rootStorageStatistics {\n      storageSize\n      repositorySize\n      lfsObjectsSize\n      buildArtifactsSize\n      packagesSize\n      snippetsSize\n      uploadsSize\n      wikiSize\n      containerRegistrySize\n      dependencyProxySize\n    }\n    sharedRunnersSetting\n    dependencyProxyManifests {\n      nodes {\n        id\n        imageName\n        digest\n        createdAt\n      }\n    }\n    dependencyProxyBlobs {\n      nodes {\n        fileName\n        size\n        createdAt\n      }\n    }\n    dependencyProxySetting {\n      enabled\n    }\n    ciVariables {\n      nodes {\n        id\n        key\n        value\n        variableType\n        protected\n        masked\n        raw\n        environmentScope\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchComprehensiveGroup($fullPath: ID!) {\n  group(fullPath: $fullPath) {\n    id\n    name\n    path\n    fullName\n    fullPath\n    description\n    visibility\n    createdAt\n    updatedAt\n    webUrl\n    avatarUrl\n    shareWithGroupLock\n    requireTwoFactorAuthentication\n    twoFactorGracePeriod\n    autoDevopsEnabled\n    emailsDisabled\n    mentionsDisabled\n    parent {\n      id\n      fullPath\n      name\n      path\n      webUrl\n    }\n    subgroupCreationLevel\n    projectCreationLevel\n    actualRepositorySizeLimit\n    lfsEnabled\n    requestAccessEnabled\n    complianceFrameworks {\n      nodes {\n        id\n        name\n        description\n        color\n        pipelineConfigurationFullPath\n      }\n    }\n    customEmoji {\n      nodes {\n        id\n        name\n        url\n      }\n    }\n    groupMembers {\n      nodes {\n        id\n        accessLevel {\n          integerValue\n          stringValue\n        }\n        createdAt\n        updatedAt\n        expiresAt\n        user {\n          id\n          username\n          name\n          publicEmail\n          state\n          webUrl\n          avatarUrl\n        }\n      }\n    }\n    labels {\n      nodes {\n        id\n        title\n        description\n        color\n        textColor\n      }\n    }\n    milestones {\n      nodes {\n        id\n        title\n        description\n        state\n        dueDate\n        startDate\n        createdAt\n        updatedAt\n      }\n    }\n    packages {\n      nodes {\n        id\n        name\n        version\n        packageType\n        createdAt\n        updatedAt\n      }\n    }\n    runners {\n      nodes {\n        id\n        runnerType\n        description\n        contactedAt\n        active\n        status\n        tagList\n      }\n    }\n    timelogs {\n      nodes {\n        id\n        timeSpent\n        spentAt\n        summary\n        user {\n          id\n          username\n          name\n        }\n      }\n    }\n    vulnerabilities {\n      nodes {\n        id\n        title\n        description\n        state\n        severity\n        reportType\n        detectedAt\n        dismissedAt\n        resolvedAt\n        confirmedAt\n      }\n    }\n    workItemTypes {\n      nodes {\n        id\n        name\n        iconName\n      }\n    }\n    rootStorageStatistics {\n      storageSize\n      repositorySize\n      lfsObjectsSize\n      buildArtifactsSize\n      packagesSize\n      snippetsSize\n      uploadsSize\n      wikiSize\n      containerRegistrySize\n      dependencyProxySize\n    }\n    sharedRunnersSetting\n    dependencyProxyManifests {\n      nodes {\n        id\n        imageName\n        digest\n        createdAt\n      }\n    }\n    dependencyProxyBlobs {\n      nodes {\n        fileName\n        size\n        createdAt\n      }\n    }\n    dependencyProxySetting {\n      enabled\n    }\n    ciVariables {\n      nodes {\n        id\n        key\n        value\n        variableType\n        protected\n        masked\n        raw\n        environmentScope\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n  group(fullPath: $fullPath) {\n    projects(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullPath\n        nameWithNamespace\n        description\n        visibility\n        createdAt\n        updatedAt\n        lastActivityAt\n        webUrl\n        avatarUrl\n        archived\n        forksCount\n        starCount\n        issuesEnabled\n        mergeRequestsEnabled\n        wikiEnabled\n        snippetsEnabled\n        containerRegistryEnabled\n        lfsEnabled\n        requestAccessEnabled\n        publicJobs\n        sharedRunnersEnabled\n        sshUrlToRepo\n        httpUrlToRepo\n        onlyAllowMergeIfPipelineSucceeds\n        onlyAllowMergeIfAllDiscussionsAreResolved\n        removeSourceBranchAfterMerge\n        printingMergeRequestLinkEnabled\n        allowMergeOnSkippedPipeline\n        serviceDeskEnabled\n        serviceDeskAddress\n        topics\n        tagList\n        complianceFrameworks {\n          nodes {\n            id\n            name\n            description\n            color\n            pipelineConfigurationFullPath\n          }\n        }\n        projectMembers {\n          nodes {\n            id\n            accessLevel {\n              integerValue\n              stringValue\n            }\n            createdAt\n            updatedAt\n            expiresAt\n            user {\n              id\n              username\n              name\n              publicEmail\n              state\n              webUrl\n              avatarUrl\n            }\n          }\n        }\n        repository {\n          exists\n          empty\n          rootRef\n          tree {\n            lastCommit {\n              id\n              sha\n              title\n              message\n              authorName\n              authorEmail\n              authoredDate\n              committedDate\n              webUrl\n            }\n          }\n        }\n        statistics {\n          commitCount\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n        }\n        autocloseReferencedIssues\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n  group(fullPath: $fullPath) {\n    projects(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullPath\n        nameWithNamespace\n        description\n        visibility\n        createdAt\n        updatedAt\n        lastActivityAt\n        webUrl\n        avatarUrl\n        archived\n        forksCount\n        starCount\n        issuesEnabled\n        mergeRequestsEnabled\n        wikiEnabled\n        snippetsEnabled\n        containerRegistryEnabled\n        lfsEnabled\n        requestAccessEnabled\n        publicJobs\n        sharedRunnersEnabled\n        sshUrlToRepo\n        httpUrlToRepo\n        onlyAllowMergeIfPipelineSucceeds\n        onlyAllowMergeIfAllDiscussionsAreResolved\n        removeSourceBranchAfterMerge\n        printingMergeRequestLinkEnabled\n        allowMergeOnSkippedPipeline\n        serviceDeskEnabled\n        serviceDeskAddress\n        topics\n        tagList\n        complianceFrameworks {\n          nodes {\n            id\n            name\n            description\n            color\n            pipelineConfigurationFullPath\n          }\n        }\n        projectMembers {\n          nodes {\n            id\n            accessLevel {\n              integerValue\n              stringValue\n            }\n            createdAt\n            updatedAt\n            expiresAt\n            user {\n              id\n              username\n              name\n              publicEmail\n              state\n              webUrl\n              avatarUrl\n            }\n          }\n        }\n        repository {\n          exists\n          empty\n          rootRef\n          tree {\n            lastCommit {\n              id\n              sha\n              title\n              message\n              authorName\n              authorEmail\n              authoredDate\n              committedDate\n              webUrl\n            }\n          }\n        }\n        statistics {\n          commitCount\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n        }\n        autocloseReferencedIssues\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchComprehensiveGroups($first: Int, $after: String) {\n  groups(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n    }\n  }\n}"
): (typeof documents)["query FetchComprehensiveGroups($first: Int, $after: String) {\n  groups(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchComprehensiveProject($fullPath: ID!) {\n  project(fullPath: $fullPath) {\n    id\n    name\n    path\n    fullPath\n    nameWithNamespace\n    description\n    visibility\n    createdAt\n    updatedAt\n    lastActivityAt\n    webUrl\n    avatarUrl\n    archived\n    forksCount\n    starCount\n    openIssuesCount\n    issuesEnabled\n    mergeRequestsEnabled\n    wikiEnabled\n    snippetsEnabled\n    jobsEnabled\n    containerRegistryEnabled\n    lfsEnabled\n    requestAccessEnabled\n    publicJobs\n    sharedRunnersEnabled\n    issuesAccessLevel {\n      integerValue\n      stringValue\n    }\n    mergeRequestsAccessLevel {\n      integerValue\n      stringValue\n    }\n    forkingAccessLevel {\n      integerValue\n      stringValue\n    }\n    sshUrlToRepo\n    httpUrlToRepo\n    onlyAllowMergeIfPipelineSucceeds\n    onlyAllowMergeIfAllDiscussionsAreResolved\n    removeSourceBranchAfterMerge\n    printingMergeRequestLinkEnabled\n    serviceDeskEnabled\n    topics\n    tagList\n    group {\n      id\n      name\n      path\n      fullPath\n      webUrl\n    }\n    namespace {\n      id\n      name\n      path\n      fullPath\n    }\n    projectMembers(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        accessLevel {\n          integerValue\n          stringValue\n        }\n        createdAt\n        updatedAt\n        expiresAt\n        user {\n          id\n          username\n          name\n          publicEmail\n          state\n          webUrl\n          avatarUrl\n          bio\n          location\n          organization\n          linkedin\n          twitter\n          lastActivityOn\n          createdAt\n          userPermissions {\n            createSnippet\n          }\n        }\n      }\n    }\n    repository {\n      exists\n      empty\n      rootRef\n      tree {\n        lastCommit {\n          id\n          shortId\n          title\n          message\n          authorName\n          authorEmail\n          authoredDate\n          committedDate\n        }\n      }\n    }\n    statistics {\n      commitCount\n      storageSize\n      repositorySize\n      lfsObjectsSize\n      buildArtifactsSize\n      packagesSize\n      snippetsSize\n      uploadsSize\n      wikiSize\n    }\n    labels(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        description\n        color\n        textColor\n        createdAt\n        updatedAt\n      }\n    }\n    milestones(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        description\n        state\n        dueDate\n        startDate\n        createdAt\n        updatedAt\n        expired\n        upcoming\n        groupMilestone\n        projectMilestone\n        stats {\n          totalIssuesCount\n          closedIssuesCount\n        }\n      }\n    }\n    issues(first: 20, sort: UPDATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        closedAt\n        dueDate\n        confidential\n        discussionLocked\n        upvotes\n        downvotes\n        userNotesCount\n        webUrl\n        relativePosition\n        emailsDisabled\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            color\n            description\n          }\n        }\n        milestone {\n          id\n          title\n          state\n          dueDate\n        }\n        taskCompletionStatus {\n          count\n          completedCount\n        }\n      }\n    }\n    mergeRequests(first: 20, sort: UPDATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        mergedAt\n        closedAt\n        sourceBranch\n        targetBranch\n        sourceBranchExists\n        targetBranchExists\n        conflicts\n        mergeable\n        mergeOngoing\n        draft\n        forceRemoveSourceBranch\n        shouldRemoveSourceBranch\n        rebaseInProgress\n        diffHeadSha\n        mergeCommitSha\n        commitCount\n        downvotes\n        upvotes\n        userNotesCount\n        webUrl\n        subscribed\n        headPipeline {\n          id\n          iid\n          status\n          detailedStatus {\n            id\n            group\n            icon\n            label\n            text\n            tooltip\n          }\n        }\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        reviewers {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            color\n            description\n          }\n        }\n        milestone {\n          id\n          title\n          state\n          dueDate\n        }\n        taskCompletionStatus {\n          count\n          completedCount\n        }\n      }\n    }\n    environments(first: 50) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        slug\n        state\n        path\n        externalUrl\n        environmentType\n        createdAt\n        updatedAt\n        autoStopAt\n        tier\n      }\n    }\n    releases(first: 20, sort: RELEASED_AT_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        name\n        tagName\n        tagPath\n        description\n        descriptionHtml\n        releasedAt\n        createdAt\n        upcomingRelease\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        commit {\n          id\n          shortId\n          title\n          authorName\n          authoredDate\n        }\n        assets {\n          count\n          sources {\n            nodes {\n              url\n              format\n            }\n          }\n          links {\n            nodes {\n              id\n              name\n              url\n              directAssetUrl\n              linkType\n            }\n          }\n        }\n        evidences {\n          nodes {\n            id\n            filepath\n            collectedAt\n          }\n        }\n      }\n    }\n    packages(first: 20, sort: CREATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        version\n        packageType\n        status\n        createdAt\n        updatedAt\n      }\n    }\n    snippets(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        fileName\n        description\n        visibilityLevel\n        createdAt\n        updatedAt\n        webUrl\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        blobs {\n          nodes {\n            name\n            path\n            size\n            mode\n          }\n        }\n      }\n    }\n    runners(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        runnerType\n        description\n        contactedAt\n        active\n        status\n        tagList\n        locked\n        maximumTimeout\n        accessLevel\n        paused\n        maintenanceNote\n        jobCount\n      }\n    }\n    boards(first: 10) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        hideBacklogList\n        hideClosedList\n        createdAt\n        updatedAt\n        webUrl\n        lists {\n          nodes {\n            id\n            listType\n            position\n            label {\n              id\n              title\n              color\n            }\n            milestone {\n              id\n              title\n            }\n            assignee {\n              id\n              username\n              name\n            }\n          }\n        }\n      }\n    }\n    containerRepositories(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        path\n        location\n        createdAt\n        updatedAt\n        expirationPolicyStartedAt\n        expirationPolicyCleanupStatus\n        status\n        tagsCount\n      }\n    }\n    pipelines(first: 10) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        sha\n        beforeSha\n        status\n        detailedStatus {\n          id\n          group\n          icon\n          label\n          text\n          tooltip\n        }\n        configSource\n        duration\n        queuedDuration\n        coverage\n        createdAt\n        updatedAt\n        startedAt\n        finishedAt\n        committedAt\n        ref\n        user {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        commit {\n          id\n          shortId\n          title\n          message\n          authorName\n          authorEmail\n          authoredDate\n        }\n      }\n    }\n    complianceFrameworks {\n      nodes {\n        id\n        name\n        description\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchComprehensiveProject($fullPath: ID!) {\n  project(fullPath: $fullPath) {\n    id\n    name\n    path\n    fullPath\n    nameWithNamespace\n    description\n    visibility\n    createdAt\n    updatedAt\n    lastActivityAt\n    webUrl\n    avatarUrl\n    archived\n    forksCount\n    starCount\n    openIssuesCount\n    issuesEnabled\n    mergeRequestsEnabled\n    wikiEnabled\n    snippetsEnabled\n    jobsEnabled\n    containerRegistryEnabled\n    lfsEnabled\n    requestAccessEnabled\n    publicJobs\n    sharedRunnersEnabled\n    issuesAccessLevel {\n      integerValue\n      stringValue\n    }\n    mergeRequestsAccessLevel {\n      integerValue\n      stringValue\n    }\n    forkingAccessLevel {\n      integerValue\n      stringValue\n    }\n    sshUrlToRepo\n    httpUrlToRepo\n    onlyAllowMergeIfPipelineSucceeds\n    onlyAllowMergeIfAllDiscussionsAreResolved\n    removeSourceBranchAfterMerge\n    printingMergeRequestLinkEnabled\n    serviceDeskEnabled\n    topics\n    tagList\n    group {\n      id\n      name\n      path\n      fullPath\n      webUrl\n    }\n    namespace {\n      id\n      name\n      path\n      fullPath\n    }\n    projectMembers(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        accessLevel {\n          integerValue\n          stringValue\n        }\n        createdAt\n        updatedAt\n        expiresAt\n        user {\n          id\n          username\n          name\n          publicEmail\n          state\n          webUrl\n          avatarUrl\n          bio\n          location\n          organization\n          linkedin\n          twitter\n          lastActivityOn\n          createdAt\n          userPermissions {\n            createSnippet\n          }\n        }\n      }\n    }\n    repository {\n      exists\n      empty\n      rootRef\n      tree {\n        lastCommit {\n          id\n          shortId\n          title\n          message\n          authorName\n          authorEmail\n          authoredDate\n          committedDate\n        }\n      }\n    }\n    statistics {\n      commitCount\n      storageSize\n      repositorySize\n      lfsObjectsSize\n      buildArtifactsSize\n      packagesSize\n      snippetsSize\n      uploadsSize\n      wikiSize\n    }\n    labels(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        description\n        color\n        textColor\n        createdAt\n        updatedAt\n      }\n    }\n    milestones(first: 100) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        description\n        state\n        dueDate\n        startDate\n        createdAt\n        updatedAt\n        expired\n        upcoming\n        groupMilestone\n        projectMilestone\n        stats {\n          totalIssuesCount\n          closedIssuesCount\n        }\n      }\n    }\n    issues(first: 20, sort: UPDATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        closedAt\n        dueDate\n        confidential\n        discussionLocked\n        upvotes\n        downvotes\n        userNotesCount\n        webUrl\n        relativePosition\n        emailsDisabled\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            color\n            description\n          }\n        }\n        milestone {\n          id\n          title\n          state\n          dueDate\n        }\n        taskCompletionStatus {\n          count\n          completedCount\n        }\n      }\n    }\n    mergeRequests(first: 20, sort: UPDATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        mergedAt\n        closedAt\n        sourceBranch\n        targetBranch\n        sourceBranchExists\n        targetBranchExists\n        conflicts\n        mergeable\n        mergeOngoing\n        draft\n        forceRemoveSourceBranch\n        shouldRemoveSourceBranch\n        rebaseInProgress\n        diffHeadSha\n        mergeCommitSha\n        commitCount\n        downvotes\n        upvotes\n        userNotesCount\n        webUrl\n        subscribed\n        headPipeline {\n          id\n          iid\n          status\n          detailedStatus {\n            id\n            group\n            icon\n            label\n            text\n            tooltip\n          }\n        }\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        reviewers {\n          nodes {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            color\n            description\n          }\n        }\n        milestone {\n          id\n          title\n          state\n          dueDate\n        }\n        taskCompletionStatus {\n          count\n          completedCount\n        }\n      }\n    }\n    environments(first: 50) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        slug\n        state\n        path\n        externalUrl\n        environmentType\n        createdAt\n        updatedAt\n        autoStopAt\n        tier\n      }\n    }\n    releases(first: 20, sort: RELEASED_AT_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        name\n        tagName\n        tagPath\n        description\n        descriptionHtml\n        releasedAt\n        createdAt\n        upcomingRelease\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        commit {\n          id\n          shortId\n          title\n          authorName\n          authoredDate\n        }\n        assets {\n          count\n          sources {\n            nodes {\n              url\n              format\n            }\n          }\n          links {\n            nodes {\n              id\n              name\n              url\n              directAssetUrl\n              linkType\n            }\n          }\n        }\n        evidences {\n          nodes {\n            id\n            filepath\n            collectedAt\n          }\n        }\n      }\n    }\n    packages(first: 20, sort: CREATED_DESC) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        version\n        packageType\n        status\n        createdAt\n        updatedAt\n      }\n    }\n    snippets(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        title\n        fileName\n        description\n        visibilityLevel\n        createdAt\n        updatedAt\n        webUrl\n        author {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        blobs {\n          nodes {\n            name\n            path\n            size\n            mode\n          }\n        }\n      }\n    }\n    runners(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        runnerType\n        description\n        contactedAt\n        active\n        status\n        tagList\n        locked\n        maximumTimeout\n        accessLevel\n        paused\n        maintenanceNote\n        jobCount\n      }\n    }\n    boards(first: 10) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        hideBacklogList\n        hideClosedList\n        createdAt\n        updatedAt\n        webUrl\n        lists {\n          nodes {\n            id\n            listType\n            position\n            label {\n              id\n              title\n              color\n            }\n            milestone {\n              id\n              title\n            }\n            assignee {\n              id\n              username\n              name\n            }\n          }\n        }\n      }\n    }\n    containerRepositories(first: 20) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        path\n        location\n        createdAt\n        updatedAt\n        expirationPolicyStartedAt\n        expirationPolicyCleanupStatus\n        status\n        tagsCount\n      }\n    }\n    pipelines(first: 10) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        sha\n        beforeSha\n        status\n        detailedStatus {\n          id\n          group\n          icon\n          label\n          text\n          tooltip\n        }\n        configSource\n        duration\n        queuedDuration\n        coverage\n        createdAt\n        updatedAt\n        startedAt\n        finishedAt\n        committedAt\n        ref\n        user {\n          id\n          username\n          name\n          webUrl\n          avatarUrl\n        }\n        commit {\n          id\n          shortId\n          title\n          message\n          authorName\n          authorEmail\n          authoredDate\n        }\n      }\n    }\n    complianceFrameworks {\n      nodes {\n        id\n        name\n        description\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchComprehensiveProjects($first: Int, $after: String) {\n  projects(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    nodes {\n      id\n      name\n      path\n      fullPath\n      nameWithNamespace\n      description\n      visibility\n      createdAt\n      updatedAt\n      lastActivityAt\n      webUrl\n      avatarUrl\n      archived\n      issuesEnabled\n      mergeRequestsEnabled\n      wikiEnabled\n      snippetsEnabled\n      jobsEnabled\n      containerRegistryEnabled\n      lfsEnabled\n      openIssuesCount\n      starCount\n      forksCount\n      namespace {\n        id\n        name\n        path\n        fullPath\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchComprehensiveProjects($first: Int, $after: String) {\n  projects(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    nodes {\n      id\n      name\n      path\n      fullPath\n      nameWithNamespace\n      description\n      visibility\n      createdAt\n      updatedAt\n      lastActivityAt\n      webUrl\n      avatarUrl\n      archived\n      issuesEnabled\n      mergeRequestsEnabled\n      wikiEnabled\n      snippetsEnabled\n      jobsEnabled\n      containerRegistryEnabled\n      lfsEnabled\n      openIssuesCount\n      starCount\n      forksCount\n      namespace {\n        id\n        name\n        path\n        fullPath\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n  group(fullPath: $fullPath) {\n    descendantGroups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n  group(fullPath: $fullPath) {\n    descendantGroups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchComprehensiveUser($id: UserID!) {\n  user(id: $id) {\n    id\n    username\n    name\n    publicEmail\n    location\n    webUrl\n    avatarUrl\n    state\n    bio\n    pronouns\n    organization\n    jobTitle\n    linkedin\n    twitter\n    createdAt\n    lastActivityOn\n    commitEmail\n    status {\n      availability\n      emoji\n      message\n      messageHtml\n      clearStatusAt\n    }\n    namespace {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      lfsEnabled\n      requestAccessEnabled\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n    }\n    userPermissions {\n      createSnippet\n    }\n    gitpodEnabled\n    preferencesGitpodPath\n    assignedMergeRequests {\n      count\n    }\n    authoredMergeRequests {\n      count\n    }\n    snippets {\n      nodes {\n        id\n        title\n        fileName\n        description\n        visibilityLevel\n        createdAt\n        updatedAt\n        author {\n          id\n          username\n          name\n        }\n      }\n    }\n    starredProjects {\n      nodes {\n        id\n        name\n        path\n        fullPath\n        description\n        visibility\n        avatarUrl\n        starCount\n        forksCount\n        lastActivityAt\n      }\n    }\n    groups {\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        avatarUrl\n        projectCreationLevel\n        subgroupCreationLevel\n      }\n    }\n    callouts {\n      nodes {\n        featureName\n        dismissedAt\n      }\n    }\n    todos {\n      nodes {\n        id\n        action\n        targetType\n        createdAt\n        state\n        target {\n          ... on Issue {\n            id\n            title\n          }\n          ... on MergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n    timelogs {\n      nodes {\n        id\n        timeSpent\n        spentAt\n        summary\n        issue {\n          id\n          title\n        }\n        mergeRequest {\n          id\n          title\n        }\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchComprehensiveUser($id: UserID!) {\n  user(id: $id) {\n    id\n    username\n    name\n    publicEmail\n    location\n    webUrl\n    avatarUrl\n    state\n    bio\n    pronouns\n    organization\n    jobTitle\n    linkedin\n    twitter\n    createdAt\n    lastActivityOn\n    commitEmail\n    status {\n      availability\n      emoji\n      message\n      messageHtml\n      clearStatusAt\n    }\n    namespace {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      lfsEnabled\n      requestAccessEnabled\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n    }\n    userPermissions {\n      createSnippet\n    }\n    gitpodEnabled\n    preferencesGitpodPath\n    assignedMergeRequests {\n      count\n    }\n    authoredMergeRequests {\n      count\n    }\n    snippets {\n      nodes {\n        id\n        title\n        fileName\n        description\n        visibilityLevel\n        createdAt\n        updatedAt\n        author {\n          id\n          username\n          name\n        }\n      }\n    }\n    starredProjects {\n      nodes {\n        id\n        name\n        path\n        fullPath\n        description\n        visibility\n        avatarUrl\n        starCount\n        forksCount\n        lastActivityAt\n      }\n    }\n    groups {\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        avatarUrl\n        projectCreationLevel\n        subgroupCreationLevel\n      }\n    }\n    callouts {\n      nodes {\n        featureName\n        dismissedAt\n      }\n    }\n    todos {\n      nodes {\n        id\n        action\n        targetType\n        createdAt\n        state\n        target {\n          ... on Issue {\n            id\n            title\n          }\n          ... on MergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n    timelogs {\n      nodes {\n        id\n        timeSpent\n        spentAt\n        summary\n        issue {\n          id\n          title\n        }\n        mergeRequest {\n          id\n          title\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchComprehensiveUsers($first: Int, $after: String) {\n  users(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n      userPermissions {\n        createSnippet\n      }\n      gitpodEnabled\n      preferencesGitpodPath\n      assignedMergeRequests {\n        count\n      }\n      authoredMergeRequests {\n        count\n      }\n      snippets {\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n        }\n      }\n      starredProjects {\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          avatarUrl\n          starCount\n          forksCount\n        }\n      }\n      groups {\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          avatarUrl\n        }\n      }\n      callouts {\n        nodes {\n          featureName\n          dismissedAt\n        }\n      }\n      todos {\n        nodes {\n          id\n          action\n          targetType\n          createdAt\n          state\n          target {\n            ... on Issue {\n              id\n              title\n            }\n            ... on MergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          issue {\n            id\n            title\n          }\n          mergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchComprehensiveUsers($first: Int, $after: String) {\n  users(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n      userPermissions {\n        createSnippet\n      }\n      gitpodEnabled\n      preferencesGitpodPath\n      assignedMergeRequests {\n        count\n      }\n      authoredMergeRequests {\n        count\n      }\n      snippets {\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n        }\n      }\n      starredProjects {\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          avatarUrl\n          starCount\n          forksCount\n        }\n      }\n      groups {\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          avatarUrl\n        }\n      }\n      callouts {\n        nodes {\n          featureName\n          dismissedAt\n        }\n      }\n      todos {\n        nodes {\n          id\n          action\n          targetType\n          createdAt\n          state\n          target {\n            ... on Issue {\n              id\n              title\n            }\n            ... on MergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          issue {\n            id\n            title\n          }\n          mergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchProjectIssues($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    issues(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        closedAt\n        author {\n          id\n          username\n          name\n          publicEmail\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            description\n            color\n            textColor\n          }\n        }\n        milestone {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n        }\n        webUrl\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchProjectIssues($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    issues(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        closedAt\n        author {\n          id\n          username\n          name\n          publicEmail\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            description\n            color\n            textColor\n          }\n        }\n        milestone {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n        }\n        webUrl\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchProjectMergeRequests($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    mergeRequests(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        mergedAt\n        closedAt\n        sourceBranch\n        targetBranch\n        author {\n          id\n          username\n          name\n          publicEmail\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        reviewers {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            description\n            color\n            textColor\n          }\n        }\n        milestone {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n        }\n        webUrl\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchProjectMergeRequests($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    mergeRequests(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        title\n        description\n        state\n        createdAt\n        updatedAt\n        mergedAt\n        closedAt\n        sourceBranch\n        targetBranch\n        author {\n          id\n          username\n          name\n          publicEmail\n          avatarUrl\n        }\n        assignees {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        reviewers {\n          nodes {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n        }\n        labels {\n          nodes {\n            id\n            title\n            description\n            color\n            textColor\n          }\n        }\n        milestone {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n        }\n        webUrl\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchProjectPipelines($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    pipelines(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        sha\n        ref\n        status\n        source\n        createdAt\n        updatedAt\n        startedAt\n        finishedAt\n        duration\n        coverage\n        user {\n          id\n          username\n          name\n        }\n      }\n    }\n  }\n}"
): (typeof documents)["query FetchProjectPipelines($fullPath: ID!, $first: Int, $after: String) {\n  project(fullPath: $fullPath) {\n    pipelines(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        iid\n        sha\n        ref\n        status\n        source\n        createdAt\n        updatedAt\n        startedAt\n        finishedAt\n        duration\n        coverage\n        user {\n          id\n          username\n          name\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query FetchUsersByUsernames($usernames: [String!]!, $first: Int, $after: String) {\n  users(usernames: $usernames, first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n      userPermissions {\n        createSnippet\n      }\n      gitpodEnabled\n      preferencesGitpodPath\n    }\n  }\n}"
): (typeof documents)["query FetchUsersByUsernames($usernames: [String!]!, $first: Int, $after: String) {\n  users(usernames: $usernames, first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n    nodes {\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n      createdAt\n      lastActivityOn\n      commitEmail\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n      userPermissions {\n        createSnippet\n      }\n      gitpodEnabled\n      preferencesGitpodPath\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
