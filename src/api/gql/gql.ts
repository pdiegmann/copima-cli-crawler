/* eslint-disable */
import * as types from "./graphql.js";
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  "\n  query FetchComprehensiveGroup($fullPath: ID!) {\n    group(fullPath: $fullPath) {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n          color\n          pipelineConfigurationFullPath\n        }\n      }\n      customEmoji {\n        nodes {\n          id\n          name\n          url\n        }\n      }\n      groupMembers {\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n          }\n        }\n      }\n      labels {\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n        }\n      }\n      milestones {\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n        }\n      }\n      packages {\n        nodes {\n          id\n          name\n          version\n          packageType\n          createdAt\n          updatedAt\n        }\n      }\n      runners {\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n      vulnerabilities {\n        nodes {\n          id\n          title\n          description\n          state\n          severity\n          reportType\n          detectedAt\n          dismissedAt\n          resolvedAt\n          confirmedAt\n        }\n      }\n      workItemTypes {\n        nodes {\n          id\n          name\n          iconName\n        }\n      }\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n      dependencyProxyManifests {\n        nodes {\n          id\n          imageName\n          digest\n          createdAt\n        }\n      }\n      dependencyProxyBlobs {\n        nodes {\n          fileName\n          size\n          createdAt\n        }\n      }\n      dependencyProxySetting {\n        enabled\n      }\n      ciVariables {\n        nodes {\n          id\n          key\n          value\n          variableType\n          protected\n          masked\n          raw\n          environmentScope\n        }\n      }\n    }\n  }\n": typeof types.FetchComprehensiveGroupDocument;
  "\n  query FetchComprehensiveGroups($first: Int, $after: String) {\n    groups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n": typeof types.FetchComprehensiveGroupsDocument;
  "\n  query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      descendantGroups(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          webUrl\n          avatarUrl\n          shareWithGroupLock\n          requireTwoFactorAuthentication\n          twoFactorGracePeriod\n          autoDevopsEnabled\n          emailsDisabled\n          mentionsDisabled\n          parent {\n            id\n            fullPath\n            name\n            path\n            webUrl\n          }\n          subgroupCreationLevel\n          projectCreationLevel\n          actualRepositorySizeLimit\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n          sharedRunnersSetting\n        }\n      }\n    }\n  }\n": typeof types.FetchComprehensiveSubgroupsDocument;
  "\n  query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      projects(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          # Basic project information\n          id\n          name\n          path\n          fullPath\n          nameWithNamespace\n          description\n          visibility\n          createdAt\n          updatedAt\n          lastActivityAt\n          webUrl\n          avatarUrl\n\n          # Project status and settings\n          archived\n          forksCount\n          starCount\n\n          # Feature enablement flags\n          issuesEnabled\n          mergeRequestsEnabled\n          wikiEnabled\n          snippetsEnabled\n          containerRegistryEnabled\n          lfsEnabled\n          requestAccessEnabled\n          publicJobs\n          sharedRunnersEnabled\n\n          # Repository and Git settings\n          sshUrlToRepo\n          httpUrlToRepo\n\n          # Merge request settings\n          onlyAllowMergeIfPipelineSucceeds\n          onlyAllowMergeIfAllDiscussionsAreResolved\n          removeSourceBranchAfterMerge\n          printingMergeRequestLinkEnabled\n          allowMergeOnSkippedPipeline\n\n          # Service desk settings\n          serviceDeskEnabled\n          serviceDeskAddress\n\n          # Topic and tagging\n          topics\n          tagList\n\n          # Compliance frameworks\n          complianceFrameworks {\n            nodes {\n              id\n              name\n              description\n              color\n              pipelineConfigurationFullPath\n            }\n          }\n\n          # Project members with user data\n          projectMembers {\n            nodes {\n              id\n              accessLevel {\n                integerValue\n                stringValue\n              }\n              createdAt\n              updatedAt\n              expiresAt\n              user {\n                id\n                username\n                name\n                publicEmail\n                state\n                webUrl\n                avatarUrl\n              }\n            }\n          }\n\n          # Repository information\n          repository {\n            exists\n            empty\n            rootRef\n            tree {\n              lastCommit {\n                id\n                sha\n                title\n                message\n                authorName\n                authorEmail\n                authoredDate\n                committedDate\n                webUrl\n              }\n            }\n          }\n\n          # Statistics\n          statistics {\n            commitCount\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n          }\n\n          # Autoclose referenced issues\n          autocloseReferencedIssues\n        }\n      }\n    }\n  }\n": typeof types.FetchComprehensiveGroupProjectsDocument;
  "\n  query FetchComprehensiveProject($fullPath: ID!) {\n    project(fullPath: $fullPath) {\n      # Basic project information\n      id\n      name\n      path\n      fullPath\n      nameWithNamespace\n      description\n      visibility\n      createdAt\n      updatedAt\n      lastActivityAt\n      webUrl\n      avatarUrl\n      archived\n\n      # Counts and statistics\n      forksCount\n      starCount\n      openIssuesCount\n\n      # Feature enablement flags\n      issuesEnabled\n      mergeRequestsEnabled\n      wikiEnabled\n      snippetsEnabled\n      jobsEnabled\n      containerRegistryEnabled\n      lfsEnabled\n      requestAccessEnabled\n      publicJobs\n      sharedRunnersEnabled\n\n      # Access level settings (with subfields)\n      issuesAccessLevel {\n        integerValue\n        stringValue\n      }\n      mergeRequestsAccessLevel {\n        integerValue\n        stringValue\n      }\n      forkingAccessLevel {\n        integerValue\n        stringValue\n      }\n\n      # Repository and Git settings\n      sshUrlToRepo\n      httpUrlToRepo\n\n      # Merge request settings\n      onlyAllowMergeIfPipelineSucceeds\n      onlyAllowMergeIfAllDiscussionsAreResolved\n      removeSourceBranchAfterMerge\n      printingMergeRequestLinkEnabled\n\n      # Service desk settings\n      serviceDeskEnabled\n\n      # Topic and tagging\n      topics\n      tagList\n\n      # Group and namespace\n      group {\n        id\n        name\n        path\n        fullPath\n        webUrl\n      }\n      namespace {\n        id\n        name\n        path\n        fullPath\n      }\n\n      # Project members with comprehensive user data\n      projectMembers(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n            bio\n            location\n            organization\n            linkedin\n            twitter\n            lastActivityOn\n            createdAt\n            userPermissions {\n              createSnippet\n            }\n          }\n        }\n      }\n\n      # Repository information\n      repository {\n        exists\n        empty\n        rootRef\n        tree {\n          lastCommit {\n            id\n            shortId\n            title\n            message\n            authorName\n            authorEmail\n            authoredDate\n            committedDate\n          }\n        }\n      }\n\n      # Comprehensive statistics\n      statistics {\n        commitCount\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n      }\n\n      # Labels\n      labels(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n          createdAt\n          updatedAt\n        }\n      }\n\n      # Milestones\n      milestones(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n          expired\n          upcoming\n          groupMilestone\n          projectMilestone\n          stats {\n            totalIssuesCount\n            closedIssuesCount\n          }\n        }\n      }\n\n      # Issues (limited sample for performance)\n      issues(first: 20, sort: UPDATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          closedAt\n          dueDate\n          confidential\n          discussionLocked\n          upvotes\n          downvotes\n          userNotesCount\n          webUrl\n          relativePosition\n          emailsDisabled\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              color\n              description\n            }\n          }\n          milestone {\n            id\n            title\n            state\n            dueDate\n          }\n          taskCompletionStatus {\n            count\n            completedCount\n          }\n        }\n      }\n\n      # Merge Requests (limited sample for performance)\n      mergeRequests(first: 20, sort: UPDATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          mergedAt\n          closedAt\n          sourceBranch\n          targetBranch\n          sourceBranchExists\n          targetBranchExists\n          conflicts\n          mergeable\n          mergeOngoing\n          draft\n          forceRemoveSourceBranch\n          shouldRemoveSourceBranch\n          rebaseInProgress\n          diffHeadSha\n          mergeCommitSha\n          commitCount\n          downvotes\n          upvotes\n          userNotesCount\n          webUrl\n          subscribed\n          headPipeline {\n            id\n            iid\n            status\n            detailedStatus {\n              id\n              group\n              icon\n              label\n              text\n              tooltip\n            }\n          }\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          reviewers {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              color\n              description\n            }\n          }\n          milestone {\n            id\n            title\n            state\n            dueDate\n          }\n          taskCompletionStatus {\n            count\n            completedCount\n          }\n        }\n      }\n\n      # Environments\n      environments(first: 50) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          slug\n          state\n          path\n          externalUrl\n          environmentType\n          createdAt\n          updatedAt\n          autoStopAt\n          tier\n        }\n      }\n\n      # Releases (limited sample)\n      releases(first: 20, sort: RELEASED_AT_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          name\n          tagName\n          tagPath\n          description\n          descriptionHtml\n          releasedAt\n          createdAt\n          upcomingRelease\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          commit {\n            id\n            shortId\n            title\n            authorName\n            authoredDate\n          }\n          assets {\n            count\n            sources {\n              nodes {\n                url\n                format\n              }\n            }\n            links {\n              nodes {\n                id\n                name\n                url\n                directAssetUrl\n                linkType\n              }\n            }\n          }\n          evidences {\n            nodes {\n              id\n              filepath\n              collectedAt\n            }\n          }\n        }\n      }\n\n      # Packages (limited sample)\n      packages(first: 20, sort: CREATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          version\n          packageType\n          status\n          createdAt\n          updatedAt\n        }\n      }\n\n      # Snippets\n      snippets(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n          webUrl\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          blobs {\n            nodes {\n              name\n              path\n              size\n              mode\n            }\n          }\n        }\n      }\n\n      # Runners\n      runners(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n          locked\n          maximumTimeout\n          accessLevel\n          paused\n          maintenanceNote\n          jobCount\n        }\n      }\n\n      # Board information\n      boards(first: 10) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          hideBacklogList\n          hideClosedList\n          createdAt\n          updatedAt\n          webUrl\n          lists {\n            nodes {\n              id\n              listType\n              position\n              label {\n                id\n                title\n                color\n              }\n              milestone {\n                id\n                title\n              }\n              assignee {\n                id\n                username\n                name\n              }\n            }\n          }\n        }\n      }\n\n      # Container repositories\n      containerRepositories(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          path\n          location\n          createdAt\n          updatedAt\n          expirationPolicyStartedAt\n          expirationPolicyCleanupStatus\n          status\n          tagsCount\n        }\n      }\n\n      # Pipelines (limited sample for performance)\n      pipelines(first: 10) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          sha\n          beforeSha\n          status\n          detailedStatus {\n            id\n            group\n            icon\n            label\n            text\n            tooltip\n          }\n          configSource\n          duration\n          queuedDuration\n          coverage\n          createdAt\n          updatedAt\n          startedAt\n          finishedAt\n          committedAt\n          ref\n          user {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          commit {\n            id\n            shortId\n            title\n            message\n            authorName\n            authorEmail\n            authoredDate\n          }\n        }\n      }\n\n      # Compliance frameworks\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n": typeof types.FetchComprehensiveProjectDocument;
  "\n  query FetchComprehensiveProjects($first: Int, $after: String) {\n    projects(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullPath\n        nameWithNamespace\n        description\n        visibility\n        createdAt\n        updatedAt\n        lastActivityAt\n        webUrl\n        avatarUrl\n        archived\n\n        # Feature toggles\n        issuesEnabled\n        mergeRequestsEnabled\n        wikiEnabled\n        snippetsEnabled\n        jobsEnabled\n        containerRegistryEnabled\n        lfsEnabled\n\n        # Statistics\n        openIssuesCount\n        starCount\n        forksCount\n\n        # Namespace info\n        namespace {\n          id\n          name\n          path\n          fullPath\n        }\n      }\n    }\n  }\n": typeof types.FetchComprehensiveProjectsDocument;
  "\n  query FetchProjectIssues($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      issues(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          closedAt\n          author {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              description\n              color\n              textColor\n            }\n          }\n          milestone {\n            id\n            title\n            description\n            state\n            dueDate\n            startDate\n          }\n          webUrl\n        }\n      }\n    }\n  }\n": typeof types.FetchProjectIssuesDocument;
  "\n  query FetchProjectMergeRequests($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      mergeRequests(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          mergedAt\n          closedAt\n          sourceBranch\n          targetBranch\n          author {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          reviewers {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              description\n              color\n              textColor\n            }\n          }\n          milestone {\n            id\n            title\n            description\n            state\n            dueDate\n            startDate\n          }\n          webUrl\n        }\n      }\n    }\n  }\n": typeof types.FetchProjectMergeRequestsDocument;
  "\n  query FetchProjectPipelines($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      pipelines(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          sha\n          ref\n          status\n          source\n          createdAt\n          updatedAt\n          startedAt\n          finishedAt\n          duration\n          coverage\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n    }\n  }\n": typeof types.FetchProjectPipelinesDocument;
  "\n  query FetchComprehensiveUsers($first: Int, $after: String) {\n    users(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # Namespace Information\n        namespace {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n\n        # User Preferences\n        gitpodEnabled\n        preferencesGitpodPath\n\n        # User Activity & Contributions\n        assignedMergeRequests {\n          count\n        }\n        authoredMergeRequests {\n          count\n        }\n\n        # User's Snippets\n        snippets {\n          nodes {\n            id\n            title\n            fileName\n            description\n            visibilityLevel\n            createdAt\n            updatedAt\n          }\n        }\n\n        # User's Starred Projects\n        starredProjects {\n          nodes {\n            id\n            name\n            path\n            fullPath\n            description\n            visibility\n            avatarUrl\n            starCount\n            forksCount\n          }\n        }\n\n        # User's Groups\n        groups {\n          nodes {\n            id\n            name\n            path\n            fullName\n            fullPath\n            description\n            visibility\n            avatarUrl\n          }\n        }\n\n        # User Callouts\n        callouts {\n          nodes {\n            featureName\n            dismissedAt\n          }\n        }\n\n        # User's Todos\n        todos {\n          nodes {\n            id\n            action\n            targetType\n            createdAt\n            state\n            target {\n              ... on Issue {\n                id\n                title\n              }\n              ... on MergeRequest {\n                id\n                title\n              }\n            }\n          }\n        }\n\n        # User's Time Logs\n        timelogs {\n          nodes {\n            id\n            timeSpent\n            spentAt\n            summary\n            issue {\n              id\n              title\n            }\n            mergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.FetchComprehensiveUsersDocument;
  "\n  query FetchUsersByUsernames($usernames: [String!]!, $first: Int, $after: String) {\n    users(usernames: $usernames, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # Namespace Information\n        namespace {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n\n        # User Preferences\n        gitpodEnabled\n        preferencesGitpodPath\n      }\n    }\n  }\n": typeof types.FetchUsersByUsernamesDocument;
  "\n  query FetchAdminUsers($first: Int, $after: String) {\n    users(admins: true, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n      }\n    }\n  }\n": typeof types.FetchAdminUsersDocument;
  "\n  query FetchComprehensiveUser($id: UserID!) {\n    user(id: $id) {\n      # Basic User Information\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n\n      # Timestamps\n      createdAt\n      lastActivityOn\n\n      # User Settings & Preferences\n      commitEmail\n\n      # User Status\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n\n      # Namespace Information\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n\n      # User Permissions\n      userPermissions {\n        createSnippet\n      }\n\n      # User Preferences\n      gitpodEnabled\n      preferencesGitpodPath\n\n      # User Activity & Contributions\n      assignedMergeRequests {\n        count\n      }\n      authoredMergeRequests {\n        count\n      }\n\n      # User's Snippets\n      snippets {\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n          author {\n            id\n            username\n            name\n          }\n        }\n      }\n\n      # User's Starred Projects\n      starredProjects {\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          avatarUrl\n          starCount\n          forksCount\n          lastActivityAt\n        }\n      }\n\n      # User's Groups\n      groups {\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          avatarUrl\n          projectCreationLevel\n          subgroupCreationLevel\n        }\n      }\n\n      # User Callouts\n      callouts {\n        nodes {\n          featureName\n          dismissedAt\n        }\n      }\n\n      # User's Todos\n      todos {\n        nodes {\n          id\n          action\n          targetType\n          createdAt\n          state\n          target {\n            ... on Issue {\n              id\n              title\n            }\n            ... on MergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n\n      # User's Time Logs\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          issue {\n            id\n            title\n          }\n          mergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n": typeof types.FetchComprehensiveUserDocument;
};
const documents: Documents = {
  "\n  query FetchComprehensiveGroup($fullPath: ID!) {\n    group(fullPath: $fullPath) {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n          color\n          pipelineConfigurationFullPath\n        }\n      }\n      customEmoji {\n        nodes {\n          id\n          name\n          url\n        }\n      }\n      groupMembers {\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n          }\n        }\n      }\n      labels {\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n        }\n      }\n      milestones {\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n        }\n      }\n      packages {\n        nodes {\n          id\n          name\n          version\n          packageType\n          createdAt\n          updatedAt\n        }\n      }\n      runners {\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n      vulnerabilities {\n        nodes {\n          id\n          title\n          description\n          state\n          severity\n          reportType\n          detectedAt\n          dismissedAt\n          resolvedAt\n          confirmedAt\n        }\n      }\n      workItemTypes {\n        nodes {\n          id\n          name\n          iconName\n        }\n      }\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n      dependencyProxyManifests {\n        nodes {\n          id\n          imageName\n          digest\n          createdAt\n        }\n      }\n      dependencyProxyBlobs {\n        nodes {\n          fileName\n          size\n          createdAt\n        }\n      }\n      dependencyProxySetting {\n        enabled\n      }\n      ciVariables {\n        nodes {\n          id\n          key\n          value\n          variableType\n          protected\n          masked\n          raw\n          environmentScope\n        }\n      }\n    }\n  }\n":
    types.FetchComprehensiveGroupDocument,
  "\n  query FetchComprehensiveGroups($first: Int, $after: String) {\n    groups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n":
    types.FetchComprehensiveGroupsDocument,
  "\n  query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      descendantGroups(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          webUrl\n          avatarUrl\n          shareWithGroupLock\n          requireTwoFactorAuthentication\n          twoFactorGracePeriod\n          autoDevopsEnabled\n          emailsDisabled\n          mentionsDisabled\n          parent {\n            id\n            fullPath\n            name\n            path\n            webUrl\n          }\n          subgroupCreationLevel\n          projectCreationLevel\n          actualRepositorySizeLimit\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n          sharedRunnersSetting\n        }\n      }\n    }\n  }\n":
    types.FetchComprehensiveSubgroupsDocument,
  "\n  query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      projects(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          # Basic project information\n          id\n          name\n          path\n          fullPath\n          nameWithNamespace\n          description\n          visibility\n          createdAt\n          updatedAt\n          lastActivityAt\n          webUrl\n          avatarUrl\n\n          # Project status and settings\n          archived\n          forksCount\n          starCount\n\n          # Feature enablement flags\n          issuesEnabled\n          mergeRequestsEnabled\n          wikiEnabled\n          snippetsEnabled\n          containerRegistryEnabled\n          lfsEnabled\n          requestAccessEnabled\n          publicJobs\n          sharedRunnersEnabled\n\n          # Repository and Git settings\n          sshUrlToRepo\n          httpUrlToRepo\n\n          # Merge request settings\n          onlyAllowMergeIfPipelineSucceeds\n          onlyAllowMergeIfAllDiscussionsAreResolved\n          removeSourceBranchAfterMerge\n          printingMergeRequestLinkEnabled\n          allowMergeOnSkippedPipeline\n\n          # Service desk settings\n          serviceDeskEnabled\n          serviceDeskAddress\n\n          # Topic and tagging\n          topics\n          tagList\n\n          # Compliance frameworks\n          complianceFrameworks {\n            nodes {\n              id\n              name\n              description\n              color\n              pipelineConfigurationFullPath\n            }\n          }\n\n          # Project members with user data\n          projectMembers {\n            nodes {\n              id\n              accessLevel {\n                integerValue\n                stringValue\n              }\n              createdAt\n              updatedAt\n              expiresAt\n              user {\n                id\n                username\n                name\n                publicEmail\n                state\n                webUrl\n                avatarUrl\n              }\n            }\n          }\n\n          # Repository information\n          repository {\n            exists\n            empty\n            rootRef\n            tree {\n              lastCommit {\n                id\n                sha\n                title\n                message\n                authorName\n                authorEmail\n                authoredDate\n                committedDate\n                webUrl\n              }\n            }\n          }\n\n          # Statistics\n          statistics {\n            commitCount\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n          }\n\n          # Autoclose referenced issues\n          autocloseReferencedIssues\n        }\n      }\n    }\n  }\n":
    types.FetchComprehensiveGroupProjectsDocument,
  "\n  query FetchComprehensiveProject($fullPath: ID!) {\n    project(fullPath: $fullPath) {\n      # Basic project information\n      id\n      name\n      path\n      fullPath\n      nameWithNamespace\n      description\n      visibility\n      createdAt\n      updatedAt\n      lastActivityAt\n      webUrl\n      avatarUrl\n      archived\n\n      # Counts and statistics\n      forksCount\n      starCount\n      openIssuesCount\n\n      # Feature enablement flags\n      issuesEnabled\n      mergeRequestsEnabled\n      wikiEnabled\n      snippetsEnabled\n      jobsEnabled\n      containerRegistryEnabled\n      lfsEnabled\n      requestAccessEnabled\n      publicJobs\n      sharedRunnersEnabled\n\n      # Access level settings (with subfields)\n      issuesAccessLevel {\n        integerValue\n        stringValue\n      }\n      mergeRequestsAccessLevel {\n        integerValue\n        stringValue\n      }\n      forkingAccessLevel {\n        integerValue\n        stringValue\n      }\n\n      # Repository and Git settings\n      sshUrlToRepo\n      httpUrlToRepo\n\n      # Merge request settings\n      onlyAllowMergeIfPipelineSucceeds\n      onlyAllowMergeIfAllDiscussionsAreResolved\n      removeSourceBranchAfterMerge\n      printingMergeRequestLinkEnabled\n\n      # Service desk settings\n      serviceDeskEnabled\n\n      # Topic and tagging\n      topics\n      tagList\n\n      # Group and namespace\n      group {\n        id\n        name\n        path\n        fullPath\n        webUrl\n      }\n      namespace {\n        id\n        name\n        path\n        fullPath\n      }\n\n      # Project members with comprehensive user data\n      projectMembers(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n            bio\n            location\n            organization\n            linkedin\n            twitter\n            lastActivityOn\n            createdAt\n            userPermissions {\n              createSnippet\n            }\n          }\n        }\n      }\n\n      # Repository information\n      repository {\n        exists\n        empty\n        rootRef\n        tree {\n          lastCommit {\n            id\n            shortId\n            title\n            message\n            authorName\n            authorEmail\n            authoredDate\n            committedDate\n          }\n        }\n      }\n\n      # Comprehensive statistics\n      statistics {\n        commitCount\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n      }\n\n      # Labels\n      labels(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n          createdAt\n          updatedAt\n        }\n      }\n\n      # Milestones\n      milestones(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n          expired\n          upcoming\n          groupMilestone\n          projectMilestone\n          stats {\n            totalIssuesCount\n            closedIssuesCount\n          }\n        }\n      }\n\n      # Issues (limited sample for performance)\n      issues(first: 20, sort: UPDATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          closedAt\n          dueDate\n          confidential\n          discussionLocked\n          upvotes\n          downvotes\n          userNotesCount\n          webUrl\n          relativePosition\n          emailsDisabled\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              color\n              description\n            }\n          }\n          milestone {\n            id\n            title\n            state\n            dueDate\n          }\n          taskCompletionStatus {\n            count\n            completedCount\n          }\n        }\n      }\n\n      # Merge Requests (limited sample for performance)\n      mergeRequests(first: 20, sort: UPDATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          mergedAt\n          closedAt\n          sourceBranch\n          targetBranch\n          sourceBranchExists\n          targetBranchExists\n          conflicts\n          mergeable\n          mergeOngoing\n          draft\n          forceRemoveSourceBranch\n          shouldRemoveSourceBranch\n          rebaseInProgress\n          diffHeadSha\n          mergeCommitSha\n          commitCount\n          downvotes\n          upvotes\n          userNotesCount\n          webUrl\n          subscribed\n          headPipeline {\n            id\n            iid\n            status\n            detailedStatus {\n              id\n              group\n              icon\n              label\n              text\n              tooltip\n            }\n          }\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          reviewers {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              color\n              description\n            }\n          }\n          milestone {\n            id\n            title\n            state\n            dueDate\n          }\n          taskCompletionStatus {\n            count\n            completedCount\n          }\n        }\n      }\n\n      # Environments\n      environments(first: 50) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          slug\n          state\n          path\n          externalUrl\n          environmentType\n          createdAt\n          updatedAt\n          autoStopAt\n          tier\n        }\n      }\n\n      # Releases (limited sample)\n      releases(first: 20, sort: RELEASED_AT_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          name\n          tagName\n          tagPath\n          description\n          descriptionHtml\n          releasedAt\n          createdAt\n          upcomingRelease\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          commit {\n            id\n            shortId\n            title\n            authorName\n            authoredDate\n          }\n          assets {\n            count\n            sources {\n              nodes {\n                url\n                format\n              }\n            }\n            links {\n              nodes {\n                id\n                name\n                url\n                directAssetUrl\n                linkType\n              }\n            }\n          }\n          evidences {\n            nodes {\n              id\n              filepath\n              collectedAt\n            }\n          }\n        }\n      }\n\n      # Packages (limited sample)\n      packages(first: 20, sort: CREATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          version\n          packageType\n          status\n          createdAt\n          updatedAt\n        }\n      }\n\n      # Snippets\n      snippets(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n          webUrl\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          blobs {\n            nodes {\n              name\n              path\n              size\n              mode\n            }\n          }\n        }\n      }\n\n      # Runners\n      runners(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n          locked\n          maximumTimeout\n          accessLevel\n          paused\n          maintenanceNote\n          jobCount\n        }\n      }\n\n      # Board information\n      boards(first: 10) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          hideBacklogList\n          hideClosedList\n          createdAt\n          updatedAt\n          webUrl\n          lists {\n            nodes {\n              id\n              listType\n              position\n              label {\n                id\n                title\n                color\n              }\n              milestone {\n                id\n                title\n              }\n              assignee {\n                id\n                username\n                name\n              }\n            }\n          }\n        }\n      }\n\n      # Container repositories\n      containerRepositories(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          path\n          location\n          createdAt\n          updatedAt\n          expirationPolicyStartedAt\n          expirationPolicyCleanupStatus\n          status\n          tagsCount\n        }\n      }\n\n      # Pipelines (limited sample for performance)\n      pipelines(first: 10) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          sha\n          beforeSha\n          status\n          detailedStatus {\n            id\n            group\n            icon\n            label\n            text\n            tooltip\n          }\n          configSource\n          duration\n          queuedDuration\n          coverage\n          createdAt\n          updatedAt\n          startedAt\n          finishedAt\n          committedAt\n          ref\n          user {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          commit {\n            id\n            shortId\n            title\n            message\n            authorName\n            authorEmail\n            authoredDate\n          }\n        }\n      }\n\n      # Compliance frameworks\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n":
    types.FetchComprehensiveProjectDocument,
  "\n  query FetchComprehensiveProjects($first: Int, $after: String) {\n    projects(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullPath\n        nameWithNamespace\n        description\n        visibility\n        createdAt\n        updatedAt\n        lastActivityAt\n        webUrl\n        avatarUrl\n        archived\n\n        # Feature toggles\n        issuesEnabled\n        mergeRequestsEnabled\n        wikiEnabled\n        snippetsEnabled\n        jobsEnabled\n        containerRegistryEnabled\n        lfsEnabled\n\n        # Statistics\n        openIssuesCount\n        starCount\n        forksCount\n\n        # Namespace info\n        namespace {\n          id\n          name\n          path\n          fullPath\n        }\n      }\n    }\n  }\n":
    types.FetchComprehensiveProjectsDocument,
  "\n  query FetchProjectIssues($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      issues(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          closedAt\n          author {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              description\n              color\n              textColor\n            }\n          }\n          milestone {\n            id\n            title\n            description\n            state\n            dueDate\n            startDate\n          }\n          webUrl\n        }\n      }\n    }\n  }\n":
    types.FetchProjectIssuesDocument,
  "\n  query FetchProjectMergeRequests($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      mergeRequests(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          mergedAt\n          closedAt\n          sourceBranch\n          targetBranch\n          author {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          reviewers {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              description\n              color\n              textColor\n            }\n          }\n          milestone {\n            id\n            title\n            description\n            state\n            dueDate\n            startDate\n          }\n          webUrl\n        }\n      }\n    }\n  }\n":
    types.FetchProjectMergeRequestsDocument,
  "\n  query FetchProjectPipelines($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      pipelines(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          sha\n          ref\n          status\n          source\n          createdAt\n          updatedAt\n          startedAt\n          finishedAt\n          duration\n          coverage\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n    }\n  }\n":
    types.FetchProjectPipelinesDocument,
  "\n  query FetchComprehensiveUsers($first: Int, $after: String) {\n    users(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # Namespace Information\n        namespace {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n\n        # User Preferences\n        gitpodEnabled\n        preferencesGitpodPath\n\n        # User Activity & Contributions\n        assignedMergeRequests {\n          count\n        }\n        authoredMergeRequests {\n          count\n        }\n\n        # User's Snippets\n        snippets {\n          nodes {\n            id\n            title\n            fileName\n            description\n            visibilityLevel\n            createdAt\n            updatedAt\n          }\n        }\n\n        # User's Starred Projects\n        starredProjects {\n          nodes {\n            id\n            name\n            path\n            fullPath\n            description\n            visibility\n            avatarUrl\n            starCount\n            forksCount\n          }\n        }\n\n        # User's Groups\n        groups {\n          nodes {\n            id\n            name\n            path\n            fullName\n            fullPath\n            description\n            visibility\n            avatarUrl\n          }\n        }\n\n        # User Callouts\n        callouts {\n          nodes {\n            featureName\n            dismissedAt\n          }\n        }\n\n        # User's Todos\n        todos {\n          nodes {\n            id\n            action\n            targetType\n            createdAt\n            state\n            target {\n              ... on Issue {\n                id\n                title\n              }\n              ... on MergeRequest {\n                id\n                title\n              }\n            }\n          }\n        }\n\n        # User's Time Logs\n        timelogs {\n          nodes {\n            id\n            timeSpent\n            spentAt\n            summary\n            issue {\n              id\n              title\n            }\n            mergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n":
    types.FetchComprehensiveUsersDocument,
  "\n  query FetchUsersByUsernames($usernames: [String!]!, $first: Int, $after: String) {\n    users(usernames: $usernames, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # Namespace Information\n        namespace {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n\n        # User Preferences\n        gitpodEnabled\n        preferencesGitpodPath\n      }\n    }\n  }\n":
    types.FetchUsersByUsernamesDocument,
  "\n  query FetchAdminUsers($first: Int, $after: String) {\n    users(admins: true, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n      }\n    }\n  }\n":
    types.FetchAdminUsersDocument,
  "\n  query FetchComprehensiveUser($id: UserID!) {\n    user(id: $id) {\n      # Basic User Information\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n\n      # Timestamps\n      createdAt\n      lastActivityOn\n\n      # User Settings & Preferences\n      commitEmail\n\n      # User Status\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n\n      # Namespace Information\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n\n      # User Permissions\n      userPermissions {\n        createSnippet\n      }\n\n      # User Preferences\n      gitpodEnabled\n      preferencesGitpodPath\n\n      # User Activity & Contributions\n      assignedMergeRequests {\n        count\n      }\n      authoredMergeRequests {\n        count\n      }\n\n      # User's Snippets\n      snippets {\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n          author {\n            id\n            username\n            name\n          }\n        }\n      }\n\n      # User's Starred Projects\n      starredProjects {\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          avatarUrl\n          starCount\n          forksCount\n          lastActivityAt\n        }\n      }\n\n      # User's Groups\n      groups {\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          avatarUrl\n          projectCreationLevel\n          subgroupCreationLevel\n        }\n      }\n\n      # User Callouts\n      callouts {\n        nodes {\n          featureName\n          dismissedAt\n        }\n      }\n\n      # User's Todos\n      todos {\n        nodes {\n          id\n          action\n          targetType\n          createdAt\n          state\n          target {\n            ... on Issue {\n              id\n              title\n            }\n            ... on MergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n\n      # User's Time Logs\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          issue {\n            id\n            title\n          }\n          mergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n":
    types.FetchComprehensiveUserDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveGroup($fullPath: ID!) {\n    group(fullPath: $fullPath) {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n          color\n          pipelineConfigurationFullPath\n        }\n      }\n      customEmoji {\n        nodes {\n          id\n          name\n          url\n        }\n      }\n      groupMembers {\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n          }\n        }\n      }\n      labels {\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n        }\n      }\n      milestones {\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n        }\n      }\n      packages {\n        nodes {\n          id\n          name\n          version\n          packageType\n          createdAt\n          updatedAt\n        }\n      }\n      runners {\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n      vulnerabilities {\n        nodes {\n          id\n          title\n          description\n          state\n          severity\n          reportType\n          detectedAt\n          dismissedAt\n          resolvedAt\n          confirmedAt\n        }\n      }\n      workItemTypes {\n        nodes {\n          id\n          name\n          iconName\n        }\n      }\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n      dependencyProxyManifests {\n        nodes {\n          id\n          imageName\n          digest\n          createdAt\n        }\n      }\n      dependencyProxyBlobs {\n        nodes {\n          fileName\n          size\n          createdAt\n        }\n      }\n      dependencyProxySetting {\n        enabled\n      }\n      ciVariables {\n        nodes {\n          id\n          key\n          value\n          variableType\n          protected\n          masked\n          raw\n          environmentScope\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveGroup($fullPath: ID!) {\n    group(fullPath: $fullPath) {\n      id\n      name\n      path\n      fullName\n      fullPath\n      description\n      visibility\n      createdAt\n      updatedAt\n      webUrl\n      avatarUrl\n      shareWithGroupLock\n      requireTwoFactorAuthentication\n      twoFactorGracePeriod\n      autoDevopsEnabled\n      emailsDisabled\n      mentionsDisabled\n      parent {\n        id\n        fullPath\n        name\n        path\n        webUrl\n      }\n      subgroupCreationLevel\n      projectCreationLevel\n      actualRepositorySizeLimit\n      lfsEnabled\n      requestAccessEnabled\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n          color\n          pipelineConfigurationFullPath\n        }\n      }\n      customEmoji {\n        nodes {\n          id\n          name\n          url\n        }\n      }\n      groupMembers {\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n          }\n        }\n      }\n      labels {\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n        }\n      }\n      milestones {\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n        }\n      }\n      packages {\n        nodes {\n          id\n          name\n          version\n          packageType\n          createdAt\n          updatedAt\n        }\n      }\n      runners {\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n        }\n      }\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n      vulnerabilities {\n        nodes {\n          id\n          title\n          description\n          state\n          severity\n          reportType\n          detectedAt\n          dismissedAt\n          resolvedAt\n          confirmedAt\n        }\n      }\n      workItemTypes {\n        nodes {\n          id\n          name\n          iconName\n        }\n      }\n      rootStorageStatistics {\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n        containerRegistrySize\n        dependencyProxySize\n      }\n      sharedRunnersSetting\n      dependencyProxyManifests {\n        nodes {\n          id\n          imageName\n          digest\n          createdAt\n        }\n      }\n      dependencyProxyBlobs {\n        nodes {\n          fileName\n          size\n          createdAt\n        }\n      }\n      dependencyProxySetting {\n        enabled\n      }\n      ciVariables {\n        nodes {\n          id\n          key\n          value\n          variableType\n          protected\n          masked\n          raw\n          environmentScope\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveGroups($first: Int, $after: String) {\n    groups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveGroups($first: Int, $after: String) {\n    groups(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        createdAt\n        updatedAt\n        webUrl\n        avatarUrl\n        shareWithGroupLock\n        requireTwoFactorAuthentication\n        twoFactorGracePeriod\n        autoDevopsEnabled\n        emailsDisabled\n        mentionsDisabled\n        parent {\n          id\n          fullPath\n          name\n          path\n          webUrl\n        }\n        subgroupCreationLevel\n        projectCreationLevel\n        actualRepositorySizeLimit\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n        sharedRunnersSetting\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      descendantGroups(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          webUrl\n          avatarUrl\n          shareWithGroupLock\n          requireTwoFactorAuthentication\n          twoFactorGracePeriod\n          autoDevopsEnabled\n          emailsDisabled\n          mentionsDisabled\n          parent {\n            id\n            fullPath\n            name\n            path\n            webUrl\n          }\n          subgroupCreationLevel\n          projectCreationLevel\n          actualRepositorySizeLimit\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n          sharedRunnersSetting\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveSubgroups($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      descendantGroups(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          createdAt\n          updatedAt\n          webUrl\n          avatarUrl\n          shareWithGroupLock\n          requireTwoFactorAuthentication\n          twoFactorGracePeriod\n          autoDevopsEnabled\n          emailsDisabled\n          mentionsDisabled\n          parent {\n            id\n            fullPath\n            name\n            path\n            webUrl\n          }\n          subgroupCreationLevel\n          projectCreationLevel\n          actualRepositorySizeLimit\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n          sharedRunnersSetting\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      projects(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          # Basic project information\n          id\n          name\n          path\n          fullPath\n          nameWithNamespace\n          description\n          visibility\n          createdAt\n          updatedAt\n          lastActivityAt\n          webUrl\n          avatarUrl\n\n          # Project status and settings\n          archived\n          forksCount\n          starCount\n\n          # Feature enablement flags\n          issuesEnabled\n          mergeRequestsEnabled\n          wikiEnabled\n          snippetsEnabled\n          containerRegistryEnabled\n          lfsEnabled\n          requestAccessEnabled\n          publicJobs\n          sharedRunnersEnabled\n\n          # Repository and Git settings\n          sshUrlToRepo\n          httpUrlToRepo\n\n          # Merge request settings\n          onlyAllowMergeIfPipelineSucceeds\n          onlyAllowMergeIfAllDiscussionsAreResolved\n          removeSourceBranchAfterMerge\n          printingMergeRequestLinkEnabled\n          allowMergeOnSkippedPipeline\n\n          # Service desk settings\n          serviceDeskEnabled\n          serviceDeskAddress\n\n          # Topic and tagging\n          topics\n          tagList\n\n          # Compliance frameworks\n          complianceFrameworks {\n            nodes {\n              id\n              name\n              description\n              color\n              pipelineConfigurationFullPath\n            }\n          }\n\n          # Project members with user data\n          projectMembers {\n            nodes {\n              id\n              accessLevel {\n                integerValue\n                stringValue\n              }\n              createdAt\n              updatedAt\n              expiresAt\n              user {\n                id\n                username\n                name\n                publicEmail\n                state\n                webUrl\n                avatarUrl\n              }\n            }\n          }\n\n          # Repository information\n          repository {\n            exists\n            empty\n            rootRef\n            tree {\n              lastCommit {\n                id\n                sha\n                title\n                message\n                authorName\n                authorEmail\n                authoredDate\n                committedDate\n                webUrl\n              }\n            }\n          }\n\n          # Statistics\n          statistics {\n            commitCount\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n          }\n\n          # Autoclose referenced issues\n          autocloseReferencedIssues\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveGroupProjects($fullPath: ID!, $first: Int, $after: String) {\n    group(fullPath: $fullPath) {\n      projects(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n        nodes {\n          # Basic project information\n          id\n          name\n          path\n          fullPath\n          nameWithNamespace\n          description\n          visibility\n          createdAt\n          updatedAt\n          lastActivityAt\n          webUrl\n          avatarUrl\n\n          # Project status and settings\n          archived\n          forksCount\n          starCount\n\n          # Feature enablement flags\n          issuesEnabled\n          mergeRequestsEnabled\n          wikiEnabled\n          snippetsEnabled\n          containerRegistryEnabled\n          lfsEnabled\n          requestAccessEnabled\n          publicJobs\n          sharedRunnersEnabled\n\n          # Repository and Git settings\n          sshUrlToRepo\n          httpUrlToRepo\n\n          # Merge request settings\n          onlyAllowMergeIfPipelineSucceeds\n          onlyAllowMergeIfAllDiscussionsAreResolved\n          removeSourceBranchAfterMerge\n          printingMergeRequestLinkEnabled\n          allowMergeOnSkippedPipeline\n\n          # Service desk settings\n          serviceDeskEnabled\n          serviceDeskAddress\n\n          # Topic and tagging\n          topics\n          tagList\n\n          # Compliance frameworks\n          complianceFrameworks {\n            nodes {\n              id\n              name\n              description\n              color\n              pipelineConfigurationFullPath\n            }\n          }\n\n          # Project members with user data\n          projectMembers {\n            nodes {\n              id\n              accessLevel {\n                integerValue\n                stringValue\n              }\n              createdAt\n              updatedAt\n              expiresAt\n              user {\n                id\n                username\n                name\n                publicEmail\n                state\n                webUrl\n                avatarUrl\n              }\n            }\n          }\n\n          # Repository information\n          repository {\n            exists\n            empty\n            rootRef\n            tree {\n              lastCommit {\n                id\n                sha\n                title\n                message\n                authorName\n                authorEmail\n                authoredDate\n                committedDate\n                webUrl\n              }\n            }\n          }\n\n          # Statistics\n          statistics {\n            commitCount\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n          }\n\n          # Autoclose referenced issues\n          autocloseReferencedIssues\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveProject($fullPath: ID!) {\n    project(fullPath: $fullPath) {\n      # Basic project information\n      id\n      name\n      path\n      fullPath\n      nameWithNamespace\n      description\n      visibility\n      createdAt\n      updatedAt\n      lastActivityAt\n      webUrl\n      avatarUrl\n      archived\n\n      # Counts and statistics\n      forksCount\n      starCount\n      openIssuesCount\n\n      # Feature enablement flags\n      issuesEnabled\n      mergeRequestsEnabled\n      wikiEnabled\n      snippetsEnabled\n      jobsEnabled\n      containerRegistryEnabled\n      lfsEnabled\n      requestAccessEnabled\n      publicJobs\n      sharedRunnersEnabled\n\n      # Access level settings (with subfields)\n      issuesAccessLevel {\n        integerValue\n        stringValue\n      }\n      mergeRequestsAccessLevel {\n        integerValue\n        stringValue\n      }\n      forkingAccessLevel {\n        integerValue\n        stringValue\n      }\n\n      # Repository and Git settings\n      sshUrlToRepo\n      httpUrlToRepo\n\n      # Merge request settings\n      onlyAllowMergeIfPipelineSucceeds\n      onlyAllowMergeIfAllDiscussionsAreResolved\n      removeSourceBranchAfterMerge\n      printingMergeRequestLinkEnabled\n\n      # Service desk settings\n      serviceDeskEnabled\n\n      # Topic and tagging\n      topics\n      tagList\n\n      # Group and namespace\n      group {\n        id\n        name\n        path\n        fullPath\n        webUrl\n      }\n      namespace {\n        id\n        name\n        path\n        fullPath\n      }\n\n      # Project members with comprehensive user data\n      projectMembers(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n            bio\n            location\n            organization\n            linkedin\n            twitter\n            lastActivityOn\n            createdAt\n            userPermissions {\n              createSnippet\n            }\n          }\n        }\n      }\n\n      # Repository information\n      repository {\n        exists\n        empty\n        rootRef\n        tree {\n          lastCommit {\n            id\n            shortId\n            title\n            message\n            authorName\n            authorEmail\n            authoredDate\n            committedDate\n          }\n        }\n      }\n\n      # Comprehensive statistics\n      statistics {\n        commitCount\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n      }\n\n      # Labels\n      labels(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n          createdAt\n          updatedAt\n        }\n      }\n\n      # Milestones\n      milestones(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n          expired\n          upcoming\n          groupMilestone\n          projectMilestone\n          stats {\n            totalIssuesCount\n            closedIssuesCount\n          }\n        }\n      }\n\n      # Issues (limited sample for performance)\n      issues(first: 20, sort: UPDATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          closedAt\n          dueDate\n          confidential\n          discussionLocked\n          upvotes\n          downvotes\n          userNotesCount\n          webUrl\n          relativePosition\n          emailsDisabled\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              color\n              description\n            }\n          }\n          milestone {\n            id\n            title\n            state\n            dueDate\n          }\n          taskCompletionStatus {\n            count\n            completedCount\n          }\n        }\n      }\n\n      # Merge Requests (limited sample for performance)\n      mergeRequests(first: 20, sort: UPDATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          mergedAt\n          closedAt\n          sourceBranch\n          targetBranch\n          sourceBranchExists\n          targetBranchExists\n          conflicts\n          mergeable\n          mergeOngoing\n          draft\n          forceRemoveSourceBranch\n          shouldRemoveSourceBranch\n          rebaseInProgress\n          diffHeadSha\n          mergeCommitSha\n          commitCount\n          downvotes\n          upvotes\n          userNotesCount\n          webUrl\n          subscribed\n          headPipeline {\n            id\n            iid\n            status\n            detailedStatus {\n              id\n              group\n              icon\n              label\n              text\n              tooltip\n            }\n          }\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          reviewers {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              color\n              description\n            }\n          }\n          milestone {\n            id\n            title\n            state\n            dueDate\n          }\n          taskCompletionStatus {\n            count\n            completedCount\n          }\n        }\n      }\n\n      # Environments\n      environments(first: 50) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          slug\n          state\n          path\n          externalUrl\n          environmentType\n          createdAt\n          updatedAt\n          autoStopAt\n          tier\n        }\n      }\n\n      # Releases (limited sample)\n      releases(first: 20, sort: RELEASED_AT_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          name\n          tagName\n          tagPath\n          description\n          descriptionHtml\n          releasedAt\n          createdAt\n          upcomingRelease\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          commit {\n            id\n            shortId\n            title\n            authorName\n            authoredDate\n          }\n          assets {\n            count\n            sources {\n              nodes {\n                url\n                format\n              }\n            }\n            links {\n              nodes {\n                id\n                name\n                url\n                directAssetUrl\n                linkType\n              }\n            }\n          }\n          evidences {\n            nodes {\n              id\n              filepath\n              collectedAt\n            }\n          }\n        }\n      }\n\n      # Packages (limited sample)\n      packages(first: 20, sort: CREATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          version\n          packageType\n          status\n          createdAt\n          updatedAt\n        }\n      }\n\n      # Snippets\n      snippets(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n          webUrl\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          blobs {\n            nodes {\n              name\n              path\n              size\n              mode\n            }\n          }\n        }\n      }\n\n      # Runners\n      runners(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n          locked\n          maximumTimeout\n          accessLevel\n          paused\n          maintenanceNote\n          jobCount\n        }\n      }\n\n      # Board information\n      boards(first: 10) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          hideBacklogList\n          hideClosedList\n          createdAt\n          updatedAt\n          webUrl\n          lists {\n            nodes {\n              id\n              listType\n              position\n              label {\n                id\n                title\n                color\n              }\n              milestone {\n                id\n                title\n              }\n              assignee {\n                id\n                username\n                name\n              }\n            }\n          }\n        }\n      }\n\n      # Container repositories\n      containerRepositories(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          path\n          location\n          createdAt\n          updatedAt\n          expirationPolicyStartedAt\n          expirationPolicyCleanupStatus\n          status\n          tagsCount\n        }\n      }\n\n      # Pipelines (limited sample for performance)\n      pipelines(first: 10) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          sha\n          beforeSha\n          status\n          detailedStatus {\n            id\n            group\n            icon\n            label\n            text\n            tooltip\n          }\n          configSource\n          duration\n          queuedDuration\n          coverage\n          createdAt\n          updatedAt\n          startedAt\n          finishedAt\n          committedAt\n          ref\n          user {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          commit {\n            id\n            shortId\n            title\n            message\n            authorName\n            authorEmail\n            authoredDate\n          }\n        }\n      }\n\n      # Compliance frameworks\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveProject($fullPath: ID!) {\n    project(fullPath: $fullPath) {\n      # Basic project information\n      id\n      name\n      path\n      fullPath\n      nameWithNamespace\n      description\n      visibility\n      createdAt\n      updatedAt\n      lastActivityAt\n      webUrl\n      avatarUrl\n      archived\n\n      # Counts and statistics\n      forksCount\n      starCount\n      openIssuesCount\n\n      # Feature enablement flags\n      issuesEnabled\n      mergeRequestsEnabled\n      wikiEnabled\n      snippetsEnabled\n      jobsEnabled\n      containerRegistryEnabled\n      lfsEnabled\n      requestAccessEnabled\n      publicJobs\n      sharedRunnersEnabled\n\n      # Access level settings (with subfields)\n      issuesAccessLevel {\n        integerValue\n        stringValue\n      }\n      mergeRequestsAccessLevel {\n        integerValue\n        stringValue\n      }\n      forkingAccessLevel {\n        integerValue\n        stringValue\n      }\n\n      # Repository and Git settings\n      sshUrlToRepo\n      httpUrlToRepo\n\n      # Merge request settings\n      onlyAllowMergeIfPipelineSucceeds\n      onlyAllowMergeIfAllDiscussionsAreResolved\n      removeSourceBranchAfterMerge\n      printingMergeRequestLinkEnabled\n\n      # Service desk settings\n      serviceDeskEnabled\n\n      # Topic and tagging\n      topics\n      tagList\n\n      # Group and namespace\n      group {\n        id\n        name\n        path\n        fullPath\n        webUrl\n      }\n      namespace {\n        id\n        name\n        path\n        fullPath\n      }\n\n      # Project members with comprehensive user data\n      projectMembers(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          accessLevel {\n            integerValue\n            stringValue\n          }\n          createdAt\n          updatedAt\n          expiresAt\n          user {\n            id\n            username\n            name\n            publicEmail\n            state\n            webUrl\n            avatarUrl\n            bio\n            location\n            organization\n            linkedin\n            twitter\n            lastActivityOn\n            createdAt\n            userPermissions {\n              createSnippet\n            }\n          }\n        }\n      }\n\n      # Repository information\n      repository {\n        exists\n        empty\n        rootRef\n        tree {\n          lastCommit {\n            id\n            shortId\n            title\n            message\n            authorName\n            authorEmail\n            authoredDate\n            committedDate\n          }\n        }\n      }\n\n      # Comprehensive statistics\n      statistics {\n        commitCount\n        storageSize\n        repositorySize\n        lfsObjectsSize\n        buildArtifactsSize\n        packagesSize\n        snippetsSize\n        uploadsSize\n        wikiSize\n      }\n\n      # Labels\n      labels(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          description\n          color\n          textColor\n          createdAt\n          updatedAt\n        }\n      }\n\n      # Milestones\n      milestones(first: 100) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          description\n          state\n          dueDate\n          startDate\n          createdAt\n          updatedAt\n          expired\n          upcoming\n          groupMilestone\n          projectMilestone\n          stats {\n            totalIssuesCount\n            closedIssuesCount\n          }\n        }\n      }\n\n      # Issues (limited sample for performance)\n      issues(first: 20, sort: UPDATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          closedAt\n          dueDate\n          confidential\n          discussionLocked\n          upvotes\n          downvotes\n          userNotesCount\n          webUrl\n          relativePosition\n          emailsDisabled\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              color\n              description\n            }\n          }\n          milestone {\n            id\n            title\n            state\n            dueDate\n          }\n          taskCompletionStatus {\n            count\n            completedCount\n          }\n        }\n      }\n\n      # Merge Requests (limited sample for performance)\n      mergeRequests(first: 20, sort: UPDATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          mergedAt\n          closedAt\n          sourceBranch\n          targetBranch\n          sourceBranchExists\n          targetBranchExists\n          conflicts\n          mergeable\n          mergeOngoing\n          draft\n          forceRemoveSourceBranch\n          shouldRemoveSourceBranch\n          rebaseInProgress\n          diffHeadSha\n          mergeCommitSha\n          commitCount\n          downvotes\n          upvotes\n          userNotesCount\n          webUrl\n          subscribed\n          headPipeline {\n            id\n            iid\n            status\n            detailedStatus {\n              id\n              group\n              icon\n              label\n              text\n              tooltip\n            }\n          }\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          reviewers {\n            nodes {\n              id\n              username\n              name\n              webUrl\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              color\n              description\n            }\n          }\n          milestone {\n            id\n            title\n            state\n            dueDate\n          }\n          taskCompletionStatus {\n            count\n            completedCount\n          }\n        }\n      }\n\n      # Environments\n      environments(first: 50) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          slug\n          state\n          path\n          externalUrl\n          environmentType\n          createdAt\n          updatedAt\n          autoStopAt\n          tier\n        }\n      }\n\n      # Releases (limited sample)\n      releases(first: 20, sort: RELEASED_AT_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          name\n          tagName\n          tagPath\n          description\n          descriptionHtml\n          releasedAt\n          createdAt\n          upcomingRelease\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          commit {\n            id\n            shortId\n            title\n            authorName\n            authoredDate\n          }\n          assets {\n            count\n            sources {\n              nodes {\n                url\n                format\n              }\n            }\n            links {\n              nodes {\n                id\n                name\n                url\n                directAssetUrl\n                linkType\n              }\n            }\n          }\n          evidences {\n            nodes {\n              id\n              filepath\n              collectedAt\n            }\n          }\n        }\n      }\n\n      # Packages (limited sample)\n      packages(first: 20, sort: CREATED_DESC) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          version\n          packageType\n          status\n          createdAt\n          updatedAt\n        }\n      }\n\n      # Snippets\n      snippets(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n          webUrl\n          author {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          blobs {\n            nodes {\n              name\n              path\n              size\n              mode\n            }\n          }\n        }\n      }\n\n      # Runners\n      runners(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          runnerType\n          description\n          contactedAt\n          active\n          status\n          tagList\n          locked\n          maximumTimeout\n          accessLevel\n          paused\n          maintenanceNote\n          jobCount\n        }\n      }\n\n      # Board information\n      boards(first: 10) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          hideBacklogList\n          hideClosedList\n          createdAt\n          updatedAt\n          webUrl\n          lists {\n            nodes {\n              id\n              listType\n              position\n              label {\n                id\n                title\n                color\n              }\n              milestone {\n                id\n                title\n              }\n              assignee {\n                id\n                username\n                name\n              }\n            }\n          }\n        }\n      }\n\n      # Container repositories\n      containerRepositories(first: 20) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          name\n          path\n          location\n          createdAt\n          updatedAt\n          expirationPolicyStartedAt\n          expirationPolicyCleanupStatus\n          status\n          tagsCount\n        }\n      }\n\n      # Pipelines (limited sample for performance)\n      pipelines(first: 10) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          sha\n          beforeSha\n          status\n          detailedStatus {\n            id\n            group\n            icon\n            label\n            text\n            tooltip\n          }\n          configSource\n          duration\n          queuedDuration\n          coverage\n          createdAt\n          updatedAt\n          startedAt\n          finishedAt\n          committedAt\n          ref\n          user {\n            id\n            username\n            name\n            webUrl\n            avatarUrl\n          }\n          commit {\n            id\n            shortId\n            title\n            message\n            authorName\n            authorEmail\n            authoredDate\n          }\n        }\n      }\n\n      # Compliance frameworks\n      complianceFrameworks {\n        nodes {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveProjects($first: Int, $after: String) {\n    projects(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullPath\n        nameWithNamespace\n        description\n        visibility\n        createdAt\n        updatedAt\n        lastActivityAt\n        webUrl\n        avatarUrl\n        archived\n\n        # Feature toggles\n        issuesEnabled\n        mergeRequestsEnabled\n        wikiEnabled\n        snippetsEnabled\n        jobsEnabled\n        containerRegistryEnabled\n        lfsEnabled\n\n        # Statistics\n        openIssuesCount\n        starCount\n        forksCount\n\n        # Namespace info\n        namespace {\n          id\n          name\n          path\n          fullPath\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveProjects($first: Int, $after: String) {\n    projects(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        name\n        path\n        fullPath\n        nameWithNamespace\n        description\n        visibility\n        createdAt\n        updatedAt\n        lastActivityAt\n        webUrl\n        avatarUrl\n        archived\n\n        # Feature toggles\n        issuesEnabled\n        mergeRequestsEnabled\n        wikiEnabled\n        snippetsEnabled\n        jobsEnabled\n        containerRegistryEnabled\n        lfsEnabled\n\n        # Statistics\n        openIssuesCount\n        starCount\n        forksCount\n\n        # Namespace info\n        namespace {\n          id\n          name\n          path\n          fullPath\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchProjectIssues($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      issues(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          closedAt\n          author {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              description\n              color\n              textColor\n            }\n          }\n          milestone {\n            id\n            title\n            description\n            state\n            dueDate\n            startDate\n          }\n          webUrl\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchProjectIssues($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      issues(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          closedAt\n          author {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              description\n              color\n              textColor\n            }\n          }\n          milestone {\n            id\n            title\n            description\n            state\n            dueDate\n            startDate\n          }\n          webUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchProjectMergeRequests($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      mergeRequests(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          mergedAt\n          closedAt\n          sourceBranch\n          targetBranch\n          author {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          reviewers {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              description\n              color\n              textColor\n            }\n          }\n          milestone {\n            id\n            title\n            description\n            state\n            dueDate\n            startDate\n          }\n          webUrl\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchProjectMergeRequests($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      mergeRequests(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          title\n          description\n          state\n          createdAt\n          updatedAt\n          mergedAt\n          closedAt\n          sourceBranch\n          targetBranch\n          author {\n            id\n            username\n            name\n            publicEmail\n            avatarUrl\n          }\n          assignees {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          reviewers {\n            nodes {\n              id\n              username\n              name\n              publicEmail\n              avatarUrl\n            }\n          }\n          labels {\n            nodes {\n              id\n              title\n              description\n              color\n              textColor\n            }\n          }\n          milestone {\n            id\n            title\n            description\n            state\n            dueDate\n            startDate\n          }\n          webUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchProjectPipelines($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      pipelines(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          sha\n          ref\n          status\n          source\n          createdAt\n          updatedAt\n          startedAt\n          finishedAt\n          duration\n          coverage\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchProjectPipelines($fullPath: ID!, $first: Int, $after: String) {\n    project(fullPath: $fullPath) {\n      pipelines(first: $first, after: $after) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          iid\n          sha\n          ref\n          status\n          source\n          createdAt\n          updatedAt\n          startedAt\n          finishedAt\n          duration\n          coverage\n          user {\n            id\n            username\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveUsers($first: Int, $after: String) {\n    users(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # Namespace Information\n        namespace {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n\n        # User Preferences\n        gitpodEnabled\n        preferencesGitpodPath\n\n        # User Activity & Contributions\n        assignedMergeRequests {\n          count\n        }\n        authoredMergeRequests {\n          count\n        }\n\n        # User's Snippets\n        snippets {\n          nodes {\n            id\n            title\n            fileName\n            description\n            visibilityLevel\n            createdAt\n            updatedAt\n          }\n        }\n\n        # User's Starred Projects\n        starredProjects {\n          nodes {\n            id\n            name\n            path\n            fullPath\n            description\n            visibility\n            avatarUrl\n            starCount\n            forksCount\n          }\n        }\n\n        # User's Groups\n        groups {\n          nodes {\n            id\n            name\n            path\n            fullName\n            fullPath\n            description\n            visibility\n            avatarUrl\n          }\n        }\n\n        # User Callouts\n        callouts {\n          nodes {\n            featureName\n            dismissedAt\n          }\n        }\n\n        # User's Todos\n        todos {\n          nodes {\n            id\n            action\n            targetType\n            createdAt\n            state\n            target {\n              ... on Issue {\n                id\n                title\n              }\n              ... on MergeRequest {\n                id\n                title\n              }\n            }\n          }\n        }\n\n        # User's Time Logs\n        timelogs {\n          nodes {\n            id\n            timeSpent\n            spentAt\n            summary\n            issue {\n              id\n              title\n            }\n            mergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveUsers($first: Int, $after: String) {\n    users(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # Namespace Information\n        namespace {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n\n        # User Preferences\n        gitpodEnabled\n        preferencesGitpodPath\n\n        # User Activity & Contributions\n        assignedMergeRequests {\n          count\n        }\n        authoredMergeRequests {\n          count\n        }\n\n        # User's Snippets\n        snippets {\n          nodes {\n            id\n            title\n            fileName\n            description\n            visibilityLevel\n            createdAt\n            updatedAt\n          }\n        }\n\n        # User's Starred Projects\n        starredProjects {\n          nodes {\n            id\n            name\n            path\n            fullPath\n            description\n            visibility\n            avatarUrl\n            starCount\n            forksCount\n          }\n        }\n\n        # User's Groups\n        groups {\n          nodes {\n            id\n            name\n            path\n            fullName\n            fullPath\n            description\n            visibility\n            avatarUrl\n          }\n        }\n\n        # User Callouts\n        callouts {\n          nodes {\n            featureName\n            dismissedAt\n          }\n        }\n\n        # User's Todos\n        todos {\n          nodes {\n            id\n            action\n            targetType\n            createdAt\n            state\n            target {\n              ... on Issue {\n                id\n                title\n              }\n              ... on MergeRequest {\n                id\n                title\n              }\n            }\n          }\n        }\n\n        # User's Time Logs\n        timelogs {\n          nodes {\n            id\n            timeSpent\n            spentAt\n            summary\n            issue {\n              id\n              title\n            }\n            mergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchUsersByUsernames($usernames: [String!]!, $first: Int, $after: String) {\n    users(usernames: $usernames, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # Namespace Information\n        namespace {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n\n        # User Preferences\n        gitpodEnabled\n        preferencesGitpodPath\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchUsersByUsernames($usernames: [String!]!, $first: Int, $after: String) {\n    users(usernames: $usernames, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # Namespace Information\n        namespace {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          lfsEnabled\n          requestAccessEnabled\n          rootStorageStatistics {\n            storageSize\n            repositorySize\n            lfsObjectsSize\n            buildArtifactsSize\n            packagesSize\n            snippetsSize\n            uploadsSize\n            wikiSize\n            containerRegistrySize\n            dependencyProxySize\n          }\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n\n        # User Preferences\n        gitpodEnabled\n        preferencesGitpodPath\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchAdminUsers($first: Int, $after: String) {\n    users(admins: true, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchAdminUsers($first: Int, $after: String) {\n    users(admins: true, first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        # Basic User Information\n        id\n        username\n        name\n        publicEmail\n        location\n        webUrl\n        avatarUrl\n        state\n        bio\n        pronouns\n        organization\n        jobTitle\n        linkedin\n        twitter\n\n        # Timestamps\n        createdAt\n        lastActivityOn\n\n        # User Settings & Preferences\n        commitEmail\n\n        # User Status\n        status {\n          availability\n          emoji\n          message\n          messageHtml\n          clearStatusAt\n        }\n\n        # User Permissions\n        userPermissions {\n          createSnippet\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query FetchComprehensiveUser($id: UserID!) {\n    user(id: $id) {\n      # Basic User Information\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n\n      # Timestamps\n      createdAt\n      lastActivityOn\n\n      # User Settings & Preferences\n      commitEmail\n\n      # User Status\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n\n      # Namespace Information\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n\n      # User Permissions\n      userPermissions {\n        createSnippet\n      }\n\n      # User Preferences\n      gitpodEnabled\n      preferencesGitpodPath\n\n      # User Activity & Contributions\n      assignedMergeRequests {\n        count\n      }\n      authoredMergeRequests {\n        count\n      }\n\n      # User's Snippets\n      snippets {\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n          author {\n            id\n            username\n            name\n          }\n        }\n      }\n\n      # User's Starred Projects\n      starredProjects {\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          avatarUrl\n          starCount\n          forksCount\n          lastActivityAt\n        }\n      }\n\n      # User's Groups\n      groups {\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          avatarUrl\n          projectCreationLevel\n          subgroupCreationLevel\n        }\n      }\n\n      # User Callouts\n      callouts {\n        nodes {\n          featureName\n          dismissedAt\n        }\n      }\n\n      # User's Todos\n      todos {\n        nodes {\n          id\n          action\n          targetType\n          createdAt\n          state\n          target {\n            ... on Issue {\n              id\n              title\n            }\n            ... on MergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n\n      # User's Time Logs\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          issue {\n            id\n            title\n          }\n          mergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query FetchComprehensiveUser($id: UserID!) {\n    user(id: $id) {\n      # Basic User Information\n      id\n      username\n      name\n      publicEmail\n      location\n      webUrl\n      avatarUrl\n      state\n      bio\n      pronouns\n      organization\n      jobTitle\n      linkedin\n      twitter\n\n      # Timestamps\n      createdAt\n      lastActivityOn\n\n      # User Settings & Preferences\n      commitEmail\n\n      # User Status\n      status {\n        availability\n        emoji\n        message\n        messageHtml\n        clearStatusAt\n      }\n\n      # Namespace Information\n      namespace {\n        id\n        name\n        path\n        fullName\n        fullPath\n        description\n        visibility\n        lfsEnabled\n        requestAccessEnabled\n        rootStorageStatistics {\n          storageSize\n          repositorySize\n          lfsObjectsSize\n          buildArtifactsSize\n          packagesSize\n          snippetsSize\n          uploadsSize\n          wikiSize\n          containerRegistrySize\n          dependencyProxySize\n        }\n      }\n\n      # User Permissions\n      userPermissions {\n        createSnippet\n      }\n\n      # User Preferences\n      gitpodEnabled\n      preferencesGitpodPath\n\n      # User Activity & Contributions\n      assignedMergeRequests {\n        count\n      }\n      authoredMergeRequests {\n        count\n      }\n\n      # User's Snippets\n      snippets {\n        nodes {\n          id\n          title\n          fileName\n          description\n          visibilityLevel\n          createdAt\n          updatedAt\n          author {\n            id\n            username\n            name\n          }\n        }\n      }\n\n      # User's Starred Projects\n      starredProjects {\n        nodes {\n          id\n          name\n          path\n          fullPath\n          description\n          visibility\n          avatarUrl\n          starCount\n          forksCount\n          lastActivityAt\n        }\n      }\n\n      # User's Groups\n      groups {\n        nodes {\n          id\n          name\n          path\n          fullName\n          fullPath\n          description\n          visibility\n          avatarUrl\n          projectCreationLevel\n          subgroupCreationLevel\n        }\n      }\n\n      # User Callouts\n      callouts {\n        nodes {\n          featureName\n          dismissedAt\n        }\n      }\n\n      # User's Todos\n      todos {\n        nodes {\n          id\n          action\n          targetType\n          createdAt\n          state\n          target {\n            ... on Issue {\n              id\n              title\n            }\n            ... on MergeRequest {\n              id\n              title\n            }\n          }\n        }\n      }\n\n      # User's Time Logs\n      timelogs {\n        nodes {\n          id\n          timeSpent\n          spentAt\n          summary\n          issue {\n            id\n            title\n          }\n          mergeRequest {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
